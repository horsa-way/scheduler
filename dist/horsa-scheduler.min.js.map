{"version":3,"file":"horsa-scheduler.min.js","sources":["../src/date_utils.js","../src/svg_utils.js","../src/bar.js","../src/arrow.js","../src/popup.js","../src/index.js"],"sourcesContent":["const YEAR = 'year';\nconst MONTH = 'month';\nconst DAY = 'day';\nconst HOUR = 'hour';\nconst MINUTE = 'minute';\nconst SECOND = 'second';\nconst MILLISECOND = 'millisecond';\n\nexport default {\n    parse(date, date_separator = '-', time_separator = /[.:]/) {\n        if (date instanceof Date) {\n            return date;\n        }\n        if (typeof date === 'string') {\n            let date_parts, time_parts;\n            const parts = date.split(' ');\n\n            date_parts = parts[0]\n                .split(date_separator)\n                .map((val) => parseInt(val, 10));\n            time_parts = parts[1] && parts[1].split(time_separator);\n\n            // month is 0 indexed\n            date_parts[1] = date_parts[1] - 1;\n\n            let vals = date_parts;\n\n            if (time_parts && time_parts.length) {\n                if (time_parts.length == 4) {\n                    time_parts[3] = '0.' + time_parts[3];\n                    time_parts[3] = parseFloat(time_parts[3]) * 1000;\n                }\n                vals = vals.concat(time_parts);\n            }\n\n            return new Date(...vals);\n        }\n    },\n\n    to_string(date, with_time = false) {\n        if (!(date instanceof Date)) {\n            throw new TypeError('Invalid argument type');\n        }\n        const vals = this.get_date_values(date).map((val, i) => {\n            if (i === 1) {\n                // add 1 for month\n                val = val + 1;\n            }\n\n            if (i === 6) {\n                return padStart(val + '', 3, '0');\n            }\n\n            return padStart(val + '', 2, '0');\n        });\n        const date_string = `${vals[0]}-${vals[1]}-${vals[2]}`;\n        const time_string = `${vals[3]}:${vals[4]}:${vals[5]}.${vals[6]}`;\n\n        return date_string + (with_time ? ' ' + time_string : '');\n    },\n\n    format(date, format_string = 'YYYY-MM-DD HH:mm:ss.SSS', lang = 'it') {\n        const dateTimeFormat = new Intl.DateTimeFormat(lang, {\n            year: 'numeric',\n            month: '2-digit',\n            day: '2-digit',\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit',\n            fractionalSecondDigits: 3,\n            weekday: 'long',\n            month: 'long',\n            timeZone: \"UTC\",\n        });\n        const parts = dateTimeFormat.formatToParts(date);\n        const dateParts = {};\n        parts.forEach(({ type, value }) => {\n            dateParts[type] = value;\n        });\n        const day_name_capitalized = dateParts.weekday.charAt(0).toUpperCase() + dateParts.weekday.slice(1);\n        const month_name_capitalized = dateParts.month.charAt(0).toUpperCase() + dateParts.month.slice(1);\n        const format_map = {\n            YYYY: dateParts.year,\n            YYY: dateParts.year.substring(2,4),\n            MM: dateParts.month.padStart(2, '0'),\n            DD: dateParts.day.padStart(2, '0'),\n            HH: dateParts.hour.padStart(2, '0'),\n            mm: dateParts.minute.padStart(2, '0'),\n            ss: dateParts.second.padStart(2, '0'),\n            SSS: dateParts.fractionalSecond.padStart(3, '0'),\n            D: dateParts.day.padStart(2, '0'),\n            MMM: month_name_capitalized,\n            MM: month_name_capitalized.substring(0,3),\n            ddd: day_name_capitalized,\n            dd: day_name_capitalized.substring(0,2)\n        };\n\n        let str = format_string;\n        const formatted_values = [];\n\n        Object.keys(format_map)\n            .sort((a, b) => b.length - a.length) // big string first\n            .forEach((key) => {\n                if (str.includes(key)) {\n                    str = str.replace(key, `$${formatted_values.length}`);\n                    formatted_values.push(format_map[key]);\n                }\n            });\n\n        formatted_values.forEach((value, i) => {\n            str = str.replace(`$${i}`, value);\n        });\n\n        return str;\n    },\n\n    diff(date_a, date_b, scale = DAY) {\n        let milliseconds, seconds, hours, minutes, days, months, years;\n\n        milliseconds = date_a - date_b;\n        seconds = milliseconds / 1000;\n        minutes = seconds / 60;\n        hours = minutes / 60;\n        days = hours / 24;\n        months = days / 30;\n        years = months / 12;\n\n        if (!scale.endsWith('s')) {\n            scale += 's';\n        }\n\n        return Math.round(\n            {\n                milliseconds,\n                seconds,\n                minutes,\n                hours,\n                days,\n                months,\n                years,\n            }[scale]\n        );\n    },\n\n    today() {\n        const vals = this.get_date_values(new Date()).slice(0, 3);\n        return new Date(...vals);\n    },\n\n    now() {\n        return new Date();\n    },\n\n    add(date, qty, scale) {\n        qty = parseInt(qty, 10);\n        const vals = [\n            date.getUTCFullYear() + (scale === YEAR ? qty : 0),\n            date.getUTCMonth() + (scale === MONTH ? qty : 0),\n            date.getUTCDate() + (scale === DAY ? qty : 0),\n            date.getUTCHours() + (scale === HOUR ? qty : 0),\n            date.getUTCMinutes() + (scale === MINUTE ? qty : 0),\n            date.getUTCSeconds() + (scale === SECOND ? qty : 0),\n            date.getUTCMilliseconds() + (scale === MILLISECOND ? qty : 0),\n        ];\n        return new Date(Date.UTC(...vals));\n    },\n\n    start_of(date, scale) {\n        if (scale == 'week')\n        {\n            var d = this.clone(date);\n            var day = d.getUTCDay(), diff = d.getUTCDate() - day + (day == 0 ? -6 : 1); // adjust when day is sunday\n            d.setUTCDate(diff);\n            return d;\n        }\n\n        const scores = {\n            [YEAR]: 6,\n            [MONTH]: 5,\n            [DAY]: 4,\n            [HOUR]: 3,\n            [MINUTE]: 2,\n            [SECOND]: 1,\n            [MILLISECOND]: 0,\n        };\n\n        function should_reset(_scale) {\n            const max_score = scores[scale];\n            return scores[_scale] <= max_score;\n        }\n\n        const vals = [\n            date.getFullYear(),\n            should_reset(YEAR) ? 0 : date.getUTCMonth(),\n            should_reset(MONTH) ? 1 : date.getUTCDate(),\n            should_reset(DAY) ? 0 : date.getUTCHours(),\n            should_reset(HOUR) ? 0 : date.getUTCMinutes(),\n            should_reset(MINUTE) ? 0 : date.getUTCSeconds(),\n            should_reset(SECOND) ? 0 : date.getUTCMilliseconds(),\n        ];\n\n        return new Date(Date.UTC(...vals));\n    },\n\n    clone(date) {\n        return new Date(Date.UTC(...this.get_date_values(date)));\n    },\n\n    get_date_values(date) {\n        return [\n            date.getUTCFullYear(),\n            date.getUTCMonth(),\n            date.getUTCDate(),\n            date.getUTCHours(),\n            date.getUTCMinutes(),\n            date.getUTCSeconds(),\n            date.getUTCMilliseconds(),\n        ];\n    },\n\n    get_days_in_month(date) {\n        const no_of_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n        const month = date.getMonth();\n\n        if (month !== 1) {\n            return no_of_days[month];\n        }\n\n        // Feb\n        const year = date.getFullYear();\n        if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {\n            return 29;\n        }\n        return 28;\n    },\n\n    normalize_UTC(date) {\n        return new Date(Date.UTC(\n            date.getFullYear(),\n            date.getMonth(),\n            date.getDate(),\n            date.getHours(),\n            date.getMinutes(),\n            date.getSeconds(),\n            date.getMilliseconds()\n        ));\n    },\n\n    to_local(date) {\n        return new Date(\n            date.getUTCFullYear(),\n            date.getUTCMonth(),\n            date.getUTCDate(),\n            date.getUTCHours(),\n            date.getUTCMinutes(),\n            date.getUTCSeconds(),\n            date.getUTCMilliseconds(),\n        );\n    }\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\nfunction padStart(str, targetLength, padString) {\n    str = str + '';\n    targetLength = targetLength >> 0;\n    padString = String(typeof padString !== 'undefined' ? padString : ' ');\n    if (str.length > targetLength) {\n        return String(str);\n    } else {\n        targetLength = targetLength - str.length;\n        if (targetLength > padString.length) {\n            padString += padString.repeat(targetLength / padString.length);\n        }\n        return padString.slice(0, targetLength) + String(str);\n    }\n}\n","export function $(expr, con) {\n    return typeof expr === 'string'\n        ? (con || document).querySelector(expr)\n        : expr || null;\n}\n\nexport function createSVG(tag, attrs) {\n    const elem = document.createElementNS('http://www.w3.org/2000/svg', tag);\n    for (let attr in attrs) {\n        if (attr === 'append_to') {\n            const parent = attrs.append_to;\n            parent.appendChild(elem);\n        } else if (attr === 'innerHTML') {\n            elem.innerHTML = attrs.innerHTML;\n        } else {\n            elem.setAttribute(attr, attrs[attr]);\n        }\n    }\n    return elem;\n}\n\nexport function animateSVG(svgElement, attr, from, to) {\n    const animatedSvgElement = getAnimationElement(svgElement, attr, from, to);\n\n    if (animatedSvgElement === svgElement) {\n        // triggered 2nd time programmatically\n        // trigger artificial click event\n        const event = document.createEvent('HTMLEvents');\n        event.initEvent('click', true, true);\n        event.eventName = 'click';\n        animatedSvgElement.dispatchEvent(event);\n    }\n}\n\nfunction getAnimationElement(\n    svgElement,\n    attr,\n    from,\n    to,\n    dur = '0.4s',\n    begin = '0.1s'\n) {\n    const animEl = svgElement.querySelector('animate');\n    if (animEl) {\n        $.attr(animEl, {\n            attributeName: attr,\n            from,\n            to,\n            dur,\n            begin: 'click + ' + begin, // artificial click\n        });\n        return svgElement;\n    }\n\n    const animateElement = createSVG('animate', {\n        attributeName: attr,\n        from,\n        to,\n        dur,\n        begin,\n        calcMode: 'spline',\n        values: from + ';' + to,\n        keyTimes: '0; 1',\n        keySplines: cubic_bezier('ease-out'),\n    });\n    svgElement.appendChild(animateElement);\n\n    return svgElement;\n}\n\nfunction cubic_bezier(name) {\n    return {\n        ease: '.25 .1 .25 1',\n        linear: '0 0 1 1',\n        'ease-in': '.42 0 1 1',\n        'ease-out': '0 0 .58 1',\n        'ease-in-out': '.42 0 .58 1',\n    }[name];\n}\n\n$.on = (element, event, selector, callback) => {\n    if (!callback) {\n        callback = selector;\n        $.bind(element, event, callback);\n    } else {\n        $.delegate(element, event, selector, callback);\n    }\n};\n\n$.off = (element, event, handler) => {\n    element.removeEventListener(event, handler);\n};\n\n$.bind = (element, event, callback) => {\n    event.split(/\\s+/).forEach(function (event) {\n        element.addEventListener(event, callback);\n    });\n};\n\n$.delegate = (element, event, selector, callback) => {\n    element.addEventListener(event, function (e) {\n        const delegatedTarget = e.target.closest(selector);\n        if (delegatedTarget) {\n            e.delegatedTarget = delegatedTarget;\n            callback.call(this, e, delegatedTarget);\n        }\n    });\n};\n\n$.closest = (selector, element) => {\n    if (!element) return null;\n\n    if (element.matches(selector)) {\n        return element;\n    }\n\n    return $.closest(selector, element.parentNode);\n};\n\n$.attr = (element, attr, value) => {\n    if (!value && typeof attr === 'string') {\n        return element.getAttribute(attr);\n    }\n\n    if (typeof attr === 'object') {\n        for (let key in attr) {\n            $.attr(element, key, attr[key]);\n        }\n        return;\n    }\n\n    element.setAttribute(attr, value);\n};\n","import date_utils from './date_utils';\nimport { $, createSVG, animateSVG } from './svg_utils';\n\nexport default class Bar {\n    constructor(scheduler, task) {\n        this.set_defaults(scheduler, task);\n        this.prepare();\n        this.draw();\n        this.bind();\n    }\n\n    set_defaults(scheduler, task) {\n        this.action_completed = false;\n        this.scheduler = scheduler;\n        this.task = task;\n    }\n\n    prepare() {\n        this.prepare_values();\n        this.prepare_helpers();\n    }\n\n    prepare_values() {\n        let task_end = this.task._end;\n        this.invalid = this.task.invalid;\n        this.height = this.scheduler.options.bar_height;\n        this.handle_width = 8;\n        this.x = this.compute_x();\n        this.y = this.compute_y();\n        this.corner_radius = this.scheduler.options.bar_corner_radius;\n        const duration_in_minutes = date_utils.diff(task_end, this.task._start, 'minute');\n        if (this.scheduler.view_is('Hour')) {\n            this.duration =\n                duration_in_minutes /\n                this.scheduler.options.step;\n        } else {\n            this.duration =\n                date_utils.diff(task_end, this.task._start, 'hour') /\n                this.scheduler.options.step;\n            if (duration_in_minutes < 60) {\n                if (this.scheduler.view_is('Day') ||\n                    this.scheduler.view_is('Half Day') ||\n                    this.scheduler.view_is('Quarter Day'))\n                    this.duration = 0.1;\n                else\n                    this.duration = 0.03;\n\n            }\n        }\n        this.width = this.scheduler.options.column_width * this.duration;\n        this.progress_width =\n            this.scheduler.options.column_width *\n            this.duration *\n            (this.task.progress / 100) || 0;\n        this.group = createSVG('g', {\n            class: 'bar-wrapper ' + (this.task.custom_class || ''),\n            'data-id': this.task.id,\n        });\n        this.bar_group = createSVG('g', {\n            class: 'bar-group',\n            append_to: this.group,\n        });\n        this.handle_group = createSVG('g', {\n            class: 'handle-group',\n            append_to: this.group,\n        });\n    }\n\n    prepare_helpers() {\n        SVGElement.prototype.getX = function () {\n            return +this.getAttribute('x');\n        };\n        SVGElement.prototype.getY = function () {\n            return +this.getAttribute('y');\n        };\n        SVGElement.prototype.getWidth = function () {\n            return +this.getAttribute('width');\n        };\n        SVGElement.prototype.getHeight = function () {\n            return +this.getAttribute('height');\n        };\n        SVGElement.prototype.getEndX = function () {\n            return this.getX() + this.getWidth();\n        };\n    }\n\n    draw() {\n        this.draw_bar();\n        this.draw_progress_bar();\n        this.draw_label();\n        this.draw_resize_handles();\n    }\n\n    draw_bar() {\n        this.$bar = createSVG('rect', {\n            x: this.x,\n            y: this.y,\n            width: this.width,\n            height: this.height,\n            rx: this.corner_radius,\n            ry: this.corner_radius,\n            class: 'bar',\n            append_to: this.bar_group,\n        });\n\n        animateSVG(this.$bar, 'width', 0, this.width);\n\n        if (this.invalid) {\n            this.$bar.classList.add('bar-invalid');\n        }\n    }\n\n    draw_progress_bar() {\n        if (this.invalid) return;\n        this.$bar_progress = createSVG('rect', {\n            x: this.x,\n            y: this.y,\n            width: this.progress_width,\n            height: this.height,\n            rx: this.corner_radius,\n            ry: this.corner_radius,\n            class: 'bar-progress',\n            append_to: this.bar_group,\n        });\n\n        animateSVG(this.$bar_progress, 'width', 0, this.progress_width);\n    }\n\n    draw_label() {\n        createSVG('text', {\n            x: this.x + this.width / 2,\n            y: this.y + this.height / 2,\n            innerHTML: this.task.name,\n            class: 'bar-label',\n            append_to: this.bar_group,\n        });\n        // labels get BBox in the next tick\n        requestAnimationFrame(() => this.update_label_position());\n    }\n\n    draw_resize_handles() {\n        if (this.invalid) return;\n\n        const bar = this.$bar;\n        const handle_width = this.handle_width;\n\n        if (this.task.resize_right)\n            createSVG('rect', {\n                x: bar.getX() + bar.getWidth() - handle_width - 1,\n                y: bar.getY() + 1,\n                width: handle_width,\n                height: this.height - 2,\n                rx: this.corner_radius,\n                ry: this.corner_radius,\n                class: 'handle right',\n                append_to: this.handle_group,\n            });\n\n        if (this.task.resize_left)\n            createSVG('rect', {\n                x: bar.getX() + 1,\n                y: bar.getY() + 1,\n                width: handle_width,\n                height: this.height - 2,\n                rx: this.corner_radius,\n                ry: this.corner_radius,\n                class: 'handle left',\n                append_to: this.handle_group,\n            });\n\n        if (this.task.progress && this.task.progress < 100) {\n            this.$handle_progress = createSVG('polygon', {\n                points: this.get_progress_polygon_points().join(','),\n                class: 'handle progress',\n                append_to: this.handle_group,\n            });\n        }\n    }\n\n    get_progress_polygon_points() {\n        const bar_progress = this.$bar_progress;\n        return [\n            bar_progress.getEndX() - 5,\n            bar_progress.getY() + bar_progress.getHeight(),\n            bar_progress.getEndX() + 5,\n            bar_progress.getY() + bar_progress.getHeight(),\n            bar_progress.getEndX(),\n            bar_progress.getY() + bar_progress.getHeight() - 8.66,\n        ];\n    }\n\n    bind() {\n        if (this.invalid) return;\n        this.setup_click_event();\n    }\n\n    setup_click_event() {\n        $.on(this.group, 'mouseover', '.bar-wrapper', (e) => {\n            if (this.scheduler.bar_being_dragged)\n                return;\n            // if (!e.target.classList.contains('bar')) return;\n            this.show_popup(e);\n        });\n\n        $.on(this.group, 'mouseleave', '.bar-wrapper', (e) => {\n            if (e.relatedTarget != null &&\n                (e.relatedTarget.classList.contains('pointer') ||\n                    e.relatedTarget.classList.contains('title'))) return;\n            this.scheduler.hide_popup();\n        });\n\n        $.on(this.group, 'click', (e) => {\n            if (this.action_completed) return;\n\n            this.scheduler.unselect_all();\n            this.group.classList.add('active');\n        });\n\n        $.on(this.group, 'dblclick', (e) => {\n            if (this.action_completed) {\n                // just finished a move action, wait for a few seconds\n                return;\n            }\n\n            this.scheduler.trigger_event('task_dblclick', [this.task.id]);\n        });\n    }\n\n    show_popup(e) {\n        const start_date = date_utils.format(\n            this.task._start,\n            'D MMM YYYY HH:mm',\n            this.scheduler.options.language\n        );\n        const end_date = date_utils.format(\n            this.task._end,\n            'D MMM YYYY HH:mm',\n            this.scheduler.options.language\n        );\n        const subtitle = start_date + ' - ' + end_date;\n\n        this.scheduler.show_popup({\n            target_element: this.$bar,\n            title: this.task.name,\n            description: this.task.description,\n            subtitle: subtitle,\n            task: this.task,\n            e: e,\n        });\n    }\n\n    update_bar_position({ x = null, width = null, y = null }) {\n        const bar = this.$bar;\n        if (x) {\n            // get all x values of parent task\n            const xs = this.task.dependencies.map((dep) => {\n                return this.scheduler.get_bar(dep).$bar.getX();\n            });\n            // child task must not go before parent\n            const valid_x = xs.reduce((prev, curr) => {\n                return x >= curr;\n            }, x);\n            if (!valid_x) {\n                width = null;\n                return;\n            }\n            this.update_attr(bar, 'x', x);\n            this.x = x;\n        }\n        if (width && width >= this.handle_width * 2 + 3) {\n            this.update_attr(bar, 'width', width);\n            this.width = width;\n        }\n        if (y) {\n            this.update_attr(bar, 'y', y);\n            this.y = y;\n        }\n        this.update_label_position();\n        this.update_progressbar_position();\n        this.update_handle_position();\n        this.update_arrow_position();\n    }\n\n    position_changed(calc_start, calc_end) {\n        let changed = false;\n        let { new_start_date, new_end_date } = this.compute_start_end_date();\n        if (calc_start) {\n            changed = true;\n            this.task._start = new_start_date;\n            this.task.start = date_utils.to_local(new_start_date);\n        }\n\n        if (calc_end) {\n            changed = true;\n            this.task._end = new_end_date;\n            this.task.end = date_utils.to_local(new_end_date);\n        }\n\n        const new_index = this.compute_index();\n        const new_row = this.scheduler.options.rows[new_index];\n        if (this.task._index !== new_index) {\n            changed = true;\n            this.task._index = new_index;\n            this.task.row = new_row;\n        }\n\n        if (!changed) return;\n\n        this.scheduler.trigger_event('position_change', [\n            this.task,\n            new_row,\n            date_utils.to_local(new_start_date),\n            date_utils.to_local(new_end_date),\n        ]);\n    }\n\n    progress_changed() {\n        const new_progress = this.compute_progress();\n        this.task.progress = new_progress;\n        this.scheduler.trigger_event('progress_change', [this.task, new_progress]);\n    }\n\n    set_action_completed() {\n        this.action_completed = true;\n        setTimeout(() => (this.action_completed = false), 200);\n    }\n\n    compute_start_end_date() {\n        const bar = this.$bar;\n        const x_in_units = bar.getX() / this.scheduler.options.column_width;\n        let new_start_date;\n        if (this.scheduler.view_is('Hour'))\n            new_start_date = date_utils.add(\n                this.scheduler.scheduler_start,\n                x_in_units * this.scheduler.options.step,\n                'minute'\n            );\n        else\n            new_start_date = date_utils.add(\n                this.scheduler.scheduler_start,\n                x_in_units * this.scheduler.options.step,\n                'hour'\n            );\n        const width_in_units = bar.getWidth() / this.scheduler.options.column_width;\n        let new_end_date;\n        if (this.scheduler.view_is('Hour'))\n            new_end_date = date_utils.add(\n                new_start_date,\n                width_in_units * this.scheduler.options.step,\n                'minute'\n            );\n        else\n            new_end_date = date_utils.add(\n                new_start_date,\n                width_in_units * this.scheduler.options.step,\n                'hour'\n            );\n\n        return { new_start_date, new_end_date };\n    }\n\n    compute_index() {\n        const bar = this.$bar;\n        const barY = bar.getY();\n        let sum_height = this.scheduler.options.header_height + this.scheduler.options.padding / 2;\n\n        for (let i = 0; i < this.scheduler.rows.length; i++) {\n            const row_start = sum_height;\n            const row = this.scheduler.rows[i];\n            sum_height += row.height;\n\n            if (barY >= row_start && barY <= sum_height)\n                return i;\n        }\n    }\n\n    compute_progress() {\n        const progress =\n            (this.$bar_progress.getWidth() / this.$bar.getWidth()) * 100;\n        return parseInt(progress, 10);\n    }\n\n    compute_x() {\n        const { step, column_width } = this.scheduler.options;\n        const task_start = this.task._start;\n        const scheduler_start = this.scheduler.scheduler_start;\n\n        let diff;\n        if (this.scheduler.view_is('Hour'))\n            diff = date_utils.diff(task_start, scheduler_start, 'minute');\n        else\n            diff = date_utils.diff(task_start, scheduler_start, 'hour');\n\n        let x = Math.floor((diff / step) * column_width * 1000) / 1000;\n\n        return x;\n    }\n\n    compute_y() {\n        let bar_y;\n        if (this.scheduler.options.overlap) {\n            bar_y = (this.scheduler.options.padding / 2) +\n                (this.scheduler.options.padding + this.scheduler.options.bar_height) * this.task._sub_level_index +\n                this.scheduler.rows[this.task._index].y;\n        } else {\n            bar_y = ((this.scheduler.options.padding / 2) + this.scheduler.rows[this.task._index].y);\n        }\n        return bar_y;\n    }\n\n    get_snap_position(dx) {\n        let odx = dx,\n            rem,\n            position;\n\n        if (this.scheduler.view_is('Week')) {\n            rem = dx % (this.scheduler.options.column_width / 7);\n            position =\n                odx -\n                rem +\n                (rem < this.scheduler.options.column_width / 14\n                    ? 0\n                    : this.scheduler.options.column_width / 7);\n        } else if (this.scheduler.view_is('Month')) {\n            rem = dx % (this.scheduler.options.column_width / 30);\n            position =\n                odx -\n                rem +\n                (rem < this.scheduler.options.column_width / 60\n                    ? 0\n                    : this.scheduler.options.column_width / 30);\n        } else {\n            rem = dx % this.scheduler.options.column_width;\n            position =\n                odx -\n                rem +\n                (rem < this.scheduler.options.column_width / 2\n                    ? 0\n                    : this.scheduler.options.column_width);\n        }\n        return position;\n    }\n\n    update_attr(element, attr, value) {\n        value = +value;\n        if (!isNaN(value)) {\n            element.setAttribute(attr, value);\n        }\n        return element;\n    }\n\n    update_progressbar_position() {\n        if (this.invalid) return;\n        this.$bar_progress.setAttribute('x', this.$bar.getX());\n        this.$bar_progress.setAttribute('y', this.$bar.getY());\n        this.$bar_progress.setAttribute(\n            'width',\n            this.$bar.getWidth() * (this.task.progress / 100)\n        );\n    }\n\n    update_label_position() {\n        const bar = this.$bar,\n            label = this.group.querySelector('.bar-label');\n\n        const handle_width = this.handle_width;\n\n        const max_width = bar.getWidth() - (handle_width * 2);\n        const text = label.textContent;\n        const text_width = label.getBBox().width;\n        const original_text = this.task.name;\n\n        if (text_width + (handle_width * 2) > max_width) {\n            const reduction_percentage = (text_width - max_width) / text_width;\n            const visible_characters = Math.max(0, Math.round(text.length * (1 - reduction_percentage)));\n            label.textContent = text.substring(0, visible_characters);\n        } else {\n            const expansion_percentage = (max_width - text_width) / original_text.length;\n            const visible_characters = Math.min(original_text.length, Math.round(original_text.length * (1 + expansion_percentage)));\n            label.textContent = original_text.substring(0, visible_characters);\n        }\n\n        label.setAttribute('x', bar.getX() + bar.getWidth() / 2);\n        label.setAttribute('y', bar.getY() + bar.getHeight() / 2);\n    }\n\n    update_handle_position() {\n        if (this.invalid) return;\n        const bar = this.$bar;\n\n        let handle = this.handle_group.querySelector('.handle.left');\n        if (handle) {\n            handle.setAttribute('x', bar.getX() + 1)\n            handle.setAttribute('y', bar.getY() + 1)\n        }\n        handle = this.handle_group.querySelector('.handle.right');\n        if (handle) {\n            handle.setAttribute('x', bar.getEndX() - this.handle_width - 1)\n            handle.setAttribute('y', bar.getY() + 1);\n        }\n        handle = this.group.querySelector('.handle.progress');\n        handle &&\n            handle.setAttribute('points', this.get_progress_polygon_points());\n    }\n\n    update_arrow_position() {\n        this.arrows = this.arrows || [];\n        for (let arrow of this.arrows) {\n            arrow.update();\n        }\n    }\n}\n\nfunction isFunction(functionToCheck) {\n    var getType = {};\n    return (\n        functionToCheck &&\n        getType.toString.call(functionToCheck) === '[object Function]'\n    );\n}\n","import { createSVG } from './svg_utils';\n\nexport default class Arrow {\n    constructor(scheduler, from_task, to_task) {\n        this.scheduler = scheduler;\n        this.from_task = from_task;\n        this.to_task = to_task;\n\n        this.calculate_path();\n        this.draw();\n    }\n\n    calculate_path() {\n        let start_x =\n            this.from_task.$bar.getX() + this.from_task.$bar.getWidth() / 2;\n\n        const condition = () =>\n            this.to_task.$bar.getX() < start_x + this.scheduler.options.padding &&\n            start_x > this.from_task.$bar.getX() + this.scheduler.options.padding;\n\n        while (condition()) {\n            start_x -= 10;\n        }\n\n        const start_y =\n            this.from_task.$bar.getY() + this.scheduler.options.bar_height;\n\n        const end_x = this.to_task.$bar.getX() - this.scheduler.options.padding / 2;\n        const end_y =\n            this.to_task.$bar.getY() + this.scheduler.options.bar_height / 2;\n        // ======= TODO Da capire come gestirlo\n        //             this.scheduler.options.header_height +\n        //             this.scheduler.options.bar_height +\n        //             (this.scheduler.options.padding + this.scheduler.options.bar_height) *\n        //             this.from_task.task._index +\n        //             this.scheduler.options.padding;\n\n        //         const end_x = this.to_task.$bar.getX() - this.scheduler.options.padding / 2;\n        //         const end_y =\n        //             this.scheduler.options.header_height +\n        //             this.scheduler.options.bar_height / 2 +\n        //             (this.scheduler.options.padding + this.scheduler.options.bar_height) *\n        //             this.to_task.task._index +\n        //             this.scheduler.options.padding;\n        // >>>>>>> 5ec8c1cf7d6f126a89a5e5db096915fb66cda0a4\n\n        const from_is_below_to =\n            this.from_task.$bar.getY() > this.to_task.$bar.getY();\n        const curve = this.scheduler.options.arrow_curve;\n        const clockwise = from_is_below_to ? 1 : 0;\n        const curve_y = from_is_below_to ? -curve : curve;\n        const offset = from_is_below_to\n            ? end_y + this.scheduler.options.arrow_curve\n            : end_y - this.scheduler.options.arrow_curve;\n\n        this.path = `\n            M ${start_x} ${start_y}\n            V ${offset}\n            a ${curve} ${curve} 0 0 ${clockwise} ${curve} ${curve_y}\n            L ${end_x} ${end_y}\n            m -5 -5\n            l 5 5\n            l -5 5`;\n\n        if (\n            this.to_task.$bar.getX() <\n            this.from_task.$bar.getX() + this.scheduler.options.padding\n        ) {\n            const down_1 = this.scheduler.options.padding / 2 - curve;\n            const down_2 =\n                this.to_task.$bar.getY() +\n                this.to_task.$bar.getHeight() / 2 -\n                curve_y;\n            const left = this.to_task.$bar.getX() - this.scheduler.options.padding;\n\n            this.path = `\n                M ${start_x} ${start_y}\n                v ${down_1}\n                a ${curve} ${curve} 0 0 1 -${curve} ${curve}\n                H ${left}\n                a ${curve} ${curve} 0 0 ${clockwise} -${curve} ${curve_y}\n                V ${down_2}\n                a ${curve} ${curve} 0 0 ${clockwise} ${curve} ${curve_y}\n                L ${end_x} ${end_y}\n                m -5 -5\n                l 5 5\n                l -5 5`;\n        }\n    }\n\n    draw() {\n        this.element = createSVG('path', {\n            d: this.path,\n            'data-from': this.from_task.task.id,\n            'data-to': this.to_task.task.id,\n        });\n    }\n\n    update() {\n        this.calculate_path();\n        this.element.setAttribute('d', this.path);\n    }\n}\n","export default class Popup {\n    constructor(parent, custom_html) {\n        this.parent = parent;\n        this.custom_html = custom_html;\n        this.is_showing = false;\n        this.make();\n    }\n\n    make() {\n        this.parent.innerHTML = `\n            <div class=\"title\"></div>\n            <div class=\"description\"></div>\n            <div class=\"subtitle\"></div>\n            <div class=\"pointer\"></div>\n        `;\n\n        this.hide();\n\n        this.title = this.parent.querySelector('.title');\n        this.description = this.parent.querySelector('.description');\n        this.subtitle = this.parent.querySelector('.subtitle');\n        this.pointer = this.parent.querySelector('.pointer');\n    }\n\n    show(options, container, scroll) {\n        if (this.is_showing) return;\n        if (!options.target_element) {\n            throw new Error('target_element is required to show popup');\n        }\n\n        const target_element = options.target_element;\n        this.target_element = options.target_element;\n        const width = this.compute_width(options.title.length);\n\n        if (this.custom_html) {\n            let html = this.custom_html(options.task);\n            html += '<div class=\"pointer\"></div>';\n            this.parent.innerHTML = html;\n            this.pointer = this.parent.querySelector('.pointer');\n        } else {\n            // set data\n            this.title.innerHTML = options.title;\n\n            this.description.innerHTML = options.description;\n            if (options.description === '')\n                this.description.classList.remove('description');\n            else\n                this.description.classList.add('description');\n\n            this.subtitle.innerHTML = options.subtitle;\n            if (options.subtitle === '')\n                this.subtitle.classList.remove('subtitle');\n            else\n                this.subtitle.classList.add('subtitle');\n\n            this.parent.style.width = width + 'px';\n        }\n\n        // set position\n        let position_meta;\n        if (target_element instanceof HTMLElement) {\n            position_meta = target_element.getBoundingClientRect();\n        } else if (target_element instanceof SVGElement) {\n            position_meta = options.target_element.getBBox();\n        }\n        const middle_popup = width / 2;\n\n        if (options.e.clientY + this.parent.clientHeight + 20 > container.offsetHeight + container.offsetTop) {\n            this.parent.style.left = (options.e.clientX - middle_popup) + 'px';\n            if (options.target_element.localName === 'text')\n                this.parent.style.top = (parseInt(options.target_element.getAttribute('y')) + container.offsetTop - scroll - this.parent.offsetHeight - 20) + 'px';\n            else\n                this.parent.style.top = (parseInt(options.target_element.getAttribute('y')) + container.offsetTop - scroll - this.parent.offsetHeight - 10) + 'px';\n            this.pointer.style.transform = 'rotateZ(0deg)';\n            this.pointer.style.left = middle_popup + 'px';\n            this.pointer.style.top = (this.parent.offsetHeight + 0.5) + 'px';\n        } else {\n            this.parent.style.left = (options.e.clientX - middle_popup) + 'px';\n            if (options.target_element.localName === 'text')\n                this.parent.style.top = (parseInt(options.target_element.getAttribute('y')) + container.offsetTop + 15 - scroll) + 'px';\n            else\n                this.parent.style.top = (parseInt(options.target_element.getAttribute('y')) + container.offsetTop + 30 - scroll) + 'px';\n            this.pointer.style.transform = 'rotateZ(180deg)';\n            this.pointer.style.left = middle_popup + 'px';\n            this.pointer.style.top = '-10px';\n        }\n\n        if (parseFloat(this.parent.style.left) < container.offsetLeft) {\n            this.parent.style.left = container.offsetLeft + 'px';\n            this.pointer.style.left = options.e.clientX - container.offsetLeft + 'px';\n        }\n\n        // show\n        this.parent.style.opacity = 1;\n        this.is_showing = true;\n    }\n\n    compute_width(title_length) {\n        let width;\n        const char_width = 6;\n\n        if (title_length < 20)\n            width = 20 * char_width;\n        else\n            width = title_length * char_width;\n\n        return width;\n    }\n\n    hide() {\n        this.parent.style.opacity = 0;\n        this.parent.style.left = 0;\n        this.is_showing = false;\n    }\n}\n","import date_utils from './date_utils';\nimport { $, createSVG } from './svg_utils';\nimport Bar from './bar';\nimport Arrow from './arrow';\nimport Popup from './popup';\n\nimport './scheduler.scss';\n\nconst VIEW_MODE = {\n    HOUR: 'Hour',\n    QUARTER_DAY: 'Quarter Day',\n    HALF_DAY: 'Half Day',\n    DAY: 'Day',\n    WEEK: 'Week',\n    MONTH: 'Month',\n    YEAR: 'Year',\n};\n\nexport default class Scheduler {\n    constructor(wrapper, tasks, cells, options) {\n        this.setup_options(options);\n        this.setup_wrapper(wrapper);\n        this.setup_cells(cells);\n        this.setup_tasks(tasks);\n        this.setup_rows();\n        // initialize with default view mode\n        this.change_view_mode();\n        this.bind_events();\n    }\n\n    setup_wrapper(element) {\n        let svg_element, wrapper_element;\n\n        // CSS Selector is passed\n        if (typeof element === 'string') {\n            element = document.querySelector(element);\n        }\n\n        // get the SVGElement\n        if (element instanceof HTMLElement) {\n            wrapper_element = element;\n            svg_element = element.querySelector('svg');\n        } else if (element instanceof SVGElement) {\n            svg_element = element;\n        } else {\n            throw new TypeError(\n                'Scheduler only supports usage of a string CSS selector,' +\n                \" HTML DOM element or SVG DOM element for the 'element' parameter\"\n            );\n        }\n\n        // TODO da capire se da cambiare\n        // svg element\n        if (!svg_element) {\n            // create it\n            this.$svg = createSVG('svg', {\n                append_to: wrapper_element,\n                class: 'scheduler',\n                id: 'schedulerSvg'\n            });\n            this.$column_svg = createSVG('svg', {\n                append_to: wrapper_element,\n                class: 'scheduler',\n                id: 'columnSvg'\n            });\n        } else {\n            this.$svg = svg_element;\n            this.$svg.classList.add('scheduler');\n            this.$column_svg = svg_element;\n            this.$column_svg.classList.add('scheduler');\n        }\n\n        // TODO da rivedere questo giro di wrapper\n        // wrapper element\n        this.$container = document.createElement('div');\n        this.$container.classList.add('scheduler-grid-container');\n        this.$column_container = document.createElement('div');\n        this.$column_container.classList.add('scheduler-columns-container');\n\n        this.$container_parent = document.createElement('div');\n        this.$container_parent.classList.add('scheduler-container');\n        this.$container_parent.style.height = this.options.container_height + 'px';\n        this.$container_parent.appendChild(this.$column_container);\n        this.$container_parent.appendChild(this.$container);\n\n        const parent_element = this.$svg.parentElement;\n        parent_element.appendChild(this.$container_parent);\n        this.$column_container.appendChild(this.$column_svg);\n        this.$container.appendChild(this.$svg);\n\n        // popup wrapper\n        this.popup_wrapper = document.createElement('div');\n        this.popup_wrapper.classList.add('popup-wrapper');\n        this.$container_parent.appendChild(this.popup_wrapper);\n\n        $.on(this.popup_wrapper, 'mouseleave', '.popup-wrapper', (e) => {\n            this.hide_popup();\n        });\n    }\n\n    setup_options(options) {\n        const default_options = {\n            container_height: 300,\n            header_height: 50,\n            date_start: null,\n            date_end: null,\n            view_modes: [...Object.values(VIEW_MODE)],\n            bar_height: 20,\n            bar_corner_radius: 3,\n            arrow_curve: 5,\n            padding: 18,\n            view_mode: 'Day',\n            date_format: 'YYYY-MM-DD',\n            custom_popup_html: null,\n            language: 'it',\n            resize_left: false,\n            resize_right: false,\n            drag_drop_x: false,\n            drag_drop_y: false,\n            fixed_columns: [],\n            rows: [],\n            overlap: true,\n            moving_scroll_bar: true,\n            hide_fixed_columns: false,\n        };\n        this.options = Object.assign({}, default_options, options);\n\n        if (this.options.date_start)\n            this.options.date_start = date_utils.normalize_UTC(new Date(this.options.date_start));\n        if (this.options.date_end)\n            this.options.date_end = date_utils.normalize_UTC(new Date(this.options.date_end));\n    }\n\n    setup_cells(cells) {\n        this.cells = cells.filter(t => t.row && t.column);\n    }\n\n    setup_tasks(tasks) {\n        // prepare tasks\n        this.tasks = tasks.filter(t => t.row).map((task, i) => {\n            return this.setup_task(task);\n        }).filter(t => (\n            ((!this.options.date_start || t._end >= this.options.date_start) &&\n                (!this.options.date_end || t._start <= this.options.date_end) &&\n                (\n                    (t._start >= this.options.date_start && t._end <= this.options.date_end) ||  // Task within the range\n                    (t._start < this.options.date_start && t._end >= this.options.date_start) ||  // Task starts before but ends during or after date_start\n                    (t._start >= this.options.date_start && t._end > this.options.date_end)   // Task starts within the range but ends after date_end\n                ))\n        ));\n\n        this.setup_dependencies();\n    }\n\n    setup_task(task) {\n        let need_to_be_lock = false;\n        // convert to Date objects\n        task._start = date_utils.normalize_UTC(new Date(task.start));\n        task._end = date_utils.normalize_UTC(new Date(task.end));\n        if (this.options.date_end)\n            if (task._end > this.options.date_end)\n                need_to_be_lock = true;\n        if (this.options.date_start)\n            if (task._start < this.options.date_start)\n                need_to_be_lock = true;\n\n        // cache index\n        task._index = this.options.rows.indexOf(task.row);\n        if (task._index === -1) task._index = 0;\n\n        // invalid dates\n        if (!task.start && !task.end) {\n            const today = date_utils.today();\n            task._start = today;\n            task._end = date_utils.add(today, 2, 'day');\n        }\n\n        if (!task.start && task.end) {\n            task._start = date_utils.add(task._end, -2, 'day');\n        }\n\n        if (task.start && !task.end) {\n            task._end = date_utils.add(task._start, 2, 'day');\n        }\n\n        // if hours is not set, assume the last day is full day\n        // e.g: 2018-09-09 becomes 2018-09-09 23:59:59\n        const task_end_values = date_utils.get_date_values(task._end);\n        if (task_end_values.slice(3).every((d) => d === 0)) {\n            // task._end = date_utils.add(task._end, 24, 'hour');\n            task._end = date_utils.add(task._end, 23, 'hour');\n            task._end = date_utils.add(task._end, 59, 'minute');\n            task._end = date_utils.add(task._end, 59, 'second');\n        }\n\n        if (!need_to_be_lock) {\n            task.resize_left = (task.resize_left != null) ? task.resize_left : this.options.resize_left;\n            task.resize_right = (task.resize_right != null) ? task.resize_right : this.options.resize_right;\n            task.drag_drop_x = (task.drag_drop_x != null) ? task.drag_drop_x : this.options.drag_drop_x;\n            task.drag_drop_y = (task.drag_drop_y != null) ? task.drag_drop_y : this.options.drag_drop_y;\n        } else {\n            task.resize_left = false;\n            task.resize_right = false;\n            task.drag_drop_x = false;\n            task.drag_drop_y = false;\n        }\n        // invalid flag\n        if (!task.start || !task.end) {\n            task.invalid = true;\n        }\n\n        // dependencies\n        if (typeof task.dependencies === 'string' || !task.dependencies) {\n            let deps = [];\n            if (task.dependencies) {\n                deps = task.dependencies\n                    .split(',')\n                    .map((d) => d.trim())\n                    .filter((d) => d);\n            }\n            task.dependencies = deps;\n        }\n\n        // uids\n        if (!task.id) {\n            task.id = generate_id(task);\n        }\n        //description\n        if (!task.description)\n            task.description = '';\n\n        return task;\n    }\n\n    setup_dependencies() {\n        this.dependency_map = {};\n        for (let t of this.tasks) {\n            for (let d of t.dependencies) {\n                this.dependency_map[d] = this.dependency_map[d] || [];\n                this.dependency_map[d].push(t.id);\n            }\n        }\n    }\n\n    refresh(tasks = this.tasks, cells = this.cells, options = this.options) {\n        const scroll_pos = this.$svg.parentElement.scrollLeft;\n        const scroll_width = this.$svg.parentElement.scrollWidth;\n\n        this.setup_options(options);\n        this.setup_cells(cells);\n        this.setup_tasks(tasks);\n        this.setup_rows();\n        this.change_view_mode();\n\n        this.$svg.parentElement.scrollLeft = scroll_pos * (this.$svg.parentElement.scrollWidth / scroll_width);\n    }\n\n    setup_rows() {\n        this.rows = [];\n        let sum_y = (this.options.header_height + this.options.padding / 2);\n        this.options.rows.forEach(row_id => {\n            let row = { id: row_id, height: 0, y: 0, sub_level: [], cell_wrapper: [] };\n\n            if (this.options.overlap) {\n                row.sub_level = this.compute_row_sub_level(row_id);\n                row.height = this.compute_row_height(row.sub_level.length);\n            } else {\n                row.height = this.options.bar_height + this.options.padding;\n            }\n\n            for (let i = 0; i < this.options.fixed_columns.length; i++)\n                row.cell_wrapper[i] = {};\n\n            row.y += sum_y;\n            this.rows.push(row);\n            sum_y += row.height;\n        });\n    }\n\n    change_view_mode(mode = this.options.view_mode) {\n        this.update_view_scale(mode);\n        this.setup_dates();\n        this.render();\n        // fire viewmode_change event\n        this.trigger_event('view_change', [mode]);\n    }\n\n    update_view_scale(view_mode) {\n        this.options.view_mode = view_mode;\n        switch (this.options.view_mode) {\n            case VIEW_MODE.HOUR:\n                this.options.step = 60;\n                this.options.column_width = 60;\n                break;\n            case VIEW_MODE.QUARTER_DAY:\n                this.options.step = 24 / 4;\n                this.options.column_width = 24 * 2;\n                break;\n            case VIEW_MODE.HALF_DAY:\n                this.options.step = 24 / 2;\n                this.options.column_width = 24 * 2;\n                break;\n            case VIEW_MODE.DAY:\n                this.options.step = 24;\n                this.options.column_width = 24 * 2;\n                break;\n            case VIEW_MODE.WEEK:\n                this.options.step = 24 * 7;\n                this.options.column_width = this.options.step;\n                break;\n            case VIEW_MODE.MONTH:\n                this.options.step = 24 * 30;\n                this.options.column_width = 150;\n                break;\n            case VIEW_MODE.YEAR:\n                this.options.step = 24 * 365;\n                this.options.column_width = 120;\n                break;\n        }\n    }\n\n    setup_dates() {\n        this.setup_scheduler_dates();\n        this.setup_date_values();\n    }\n\n    setup_scheduler_dates() {\n        this.scheduler_start = this.options.date_start\n        this.scheduler_end = this.options.date_end;\n\n        if (!this.scheduler_start || !this.scheduler_end)\n            for (let task of this.tasks) {\n                // set global start and end date\n                if (!this.scheduler_start || task._start < this.scheduler_start) {\n                    this.scheduler_start = date_utils.clone(task._start);\n                }\n                if (!this.scheduler_end || task._end > this.scheduler_end) {\n                    this.scheduler_end = date_utils.clone(task._end);\n                }\n            }\n\n        this.scheduler_start.setUTCHours(0, 0, 0, 0);\n        this.scheduler_end.setUTCHours(0, 0, 0, 0);\n\n        // add date padding on both sides\n        if (!this.options.date_start) {\n            if (this.view_is([VIEW_MODE.HOUR, VIEW_MODE.QUARTER_DAY, VIEW_MODE.HALF_DAY])) {\n                this.scheduler_start = date_utils.add(this.scheduler_start, -7, 'day');\n            } else if (this.view_is(VIEW_MODE.MONTH)) {\n                this.scheduler_start = date_utils.start_of(this.scheduler_start, 'year');\n            } else if (this.view_is(VIEW_MODE.YEAR)) {\n                this.scheduler_start = date_utils.add(this.scheduler_start, -2, 'year');\n            } else {\n                this.scheduler_start = date_utils.add(this.scheduler_start, -1, 'month');\n            }\n        } else {\n            if (this.view_is(VIEW_MODE.WEEK)) {\n                this.scheduler_start = date_utils.start_of(this.scheduler_start, 'week');\n            } else if (this.view_is(VIEW_MODE.MONTH)) {\n                this.scheduler_start = date_utils.start_of(this.scheduler_start, 'month');\n            } else if (this.view_is(VIEW_MODE.YEAR)) {\n                this.scheduler_start = date_utils.start_of(this.scheduler_start, 'year');\n            }\n        }\n\n        if (!this.options.date_end) {\n            if (this.view_is([VIEW_MODE.HOUR, VIEW_MODE.QUARTER_DAY, VIEW_MODE.HALF_DAY])) {\n                this.scheduler_end = date_utils.add(this.scheduler_end, 7, 'day');\n            } else if (this.view_is(VIEW_MODE.MONTH)) {\n                this.scheduler_end = date_utils.add(this.scheduler_end, 1, 'year');\n            } else if (this.view_is(VIEW_MODE.YEAR)) {\n                this.scheduler_end = date_utils.add(this.scheduler_end, 2, 'year');\n            } else {\n                this.scheduler_end = date_utils.add(this.scheduler_end, 1, 'month');\n            }\n        }\n    }\n\n    setup_date_values() {\n        this.dates = [];\n        let cur_date = date_utils.clone(this.scheduler_start);\n\n        while (cur_date <= this.scheduler_end) {\n            this.dates.push(cur_date);\n            switch (this.options.view_mode) {\n                case VIEW_MODE.YEAR:\n                    cur_date = date_utils.add(cur_date, 1, 'year');\n                    break;\n                case VIEW_MODE.MONTH:\n                    cur_date = date_utils.add(cur_date, 1, 'month');\n                    break;\n                case VIEW_MODE.WEEK:\n                    cur_date = date_utils.add(cur_date, 7, 'day');\n                    break;\n                case VIEW_MODE.HOUR:\n                    cur_date = date_utils.add(cur_date, 1, 'hour');\n                    break;\n                default:\n                    cur_date = date_utils.add(cur_date, this.options.step, 'hour');\n                    break;\n            }\n        }\n    }\n\n    bind_events() {\n        this.bind_grid_events();\n        this.bind_cell_events();\n        this.bind_bar_events();\n    }\n\n    render() {\n        this.clear();\n        this.setup_layers();\n        this.make_fixed_columns();\n        this.make_grid();\n        this.make_dates();\n        this.make_bars();\n        this.make_arrows();\n        this.map_arrows_on_bars();\n        this.set_width();\n        this.set_scroll_position();\n        if (!this.options.overlap)\n            this.red_border();\n    }\n\n    setup_layers() {\n        this.layers = {};\n        this.fixed_col_layers = {};\n        const layers = ['grid', 'arrow', 'progress', 'bar', 'details', 'date'];\n        const fixed_col_layers = ['grid', 'cell', 'header'];\n        // make group layers\n        for (let layer of layers) {\n            this.layers[layer] = createSVG('g', {\n                class: layer,\n                append_to: this.$svg,\n            });\n        }\n        for (let layer of fixed_col_layers) {\n            this.fixed_col_layers[layer] = createSVG('g', {\n                class: layer,\n                append_to: this.$column_svg\n            });\n        }\n    }\n\n    // TODO refactor with single functions?\n    make_fixed_columns() {\n        const column_grid_width = this.options.fixed_columns.reduce((acc, curr) => acc + curr.width, 0);\n        if (this.options.hide_fixed_columns || column_grid_width === 0) {\n            this.$column_svg.setAttribute('width', 0);\n            return;\n        }\n        // make_grid_background\n        const sum_rows_height = this.rows[this.rows.length - 1].y + this.rows[this.rows.length - 1].height;\n        const grid_height = sum_rows_height;\n\n        createSVG('rect', {\n            x: 0,\n            y: 0,\n            width: column_grid_width,\n            height: grid_height,\n            class: 'grid-background',\n            append_to: this.fixed_col_layers.grid\n        });\n        $.attr(this.$column_svg, {\n            height: grid_height,\n            width: column_grid_width,\n        });\n\n        // make_grid_rows // praticamente è identica, cambia solo il layer e la width\n        const rows_layer = createSVG('g', { append_to: this.fixed_col_layers.grid });\n        const lines_layer = createSVG('g', { append_to: this.fixed_col_layers.grid });\n\n        let i = 0;\n\n        for (let row of this.options.rows) {\n\n            const row_height = this.rows[i].height;\n            const row_y = this.rows[i].y;\n            const rect = createSVG('rect', {\n                x: 0,\n                y: row_y,\n                width: column_grid_width,\n                height: row_height,\n                class: 'grid-row',\n                'data-id': row,\n                append_to: rows_layer,\n            });\n\n            this.rows[i].fixed_rect = rect;\n\n            const fixed_line = createSVG('line', {\n                x1: 0,\n                y1: row_y + row_height,\n                x2: column_grid_width,\n                y2: row_y + row_height,\n                class: 'row-line',\n                append_to: lines_layer,\n            });\n\n            this.rows[i].fixed_line = fixed_line;\n\n            i++;\n        }\n\n        // make_grid_header\n        const header_height = this.options.header_height + 10;\n        createSVG('rect', {\n            x: 0,\n            y: 0,\n            width: column_grid_width,\n            height: header_height,\n            class: 'grid-header',\n            append_to: this.fixed_col_layers.header\n        });\n\n        // make_dates -> header\n        const pos_y = this.options.header_height;\n        let pos_x = 0;\n        for (let column of this.options.fixed_columns) {\n            const max_width = column.width;\n            if (max_width === 0) continue;\n            let text_content = column.header;\n            const text_width = text_content.length * 7;\n\n            if (text_width > max_width) {\n                const reduction_percentage = (text_width - max_width) / text_width;\n                const visible_characters = Math.max(0, Math.round(text_content.length * (1 - reduction_percentage))) - 1;\n                text_content = text_content.substring(0, visible_characters);\n            }\n            pos_x += column.width / 2;\n            createSVG('text', {\n                x: pos_x,\n                y: pos_y,\n                value: column.header,\n                innerHTML: text_content,\n                class: 'lower-text bold',\n                append_to: this.fixed_col_layers.header\n            });\n            pos_x += column.width / 2;\n\n            createSVG('path', {\n                d: `M ${pos_x - 2} ${0} v ${this.options.header_height + (this.options.padding / 2)}`,\n                class: 'header-tick',\n                append_to: this.fixed_col_layers.header,\n            });\n\n            // make_grid_ticks\n            let tick_y = 0;\n            let tick_height = sum_rows_height;\n            createSVG('path', {\n                d: `M ${pos_x} ${tick_y} v ${tick_height}`,\n                class: 'tick thick',\n                append_to: this.fixed_col_layers.grid,\n            });\n        }\n\n        // make_bars\n        this.make_cells();\n    }\n\n    make_cells() {\n        for (let row of this.rows) {\n            const row_height = row.height;\n            const row_y = row.y;\n            let pos_x = 0;\n            let c = 0;\n            for (let column of this.options.fixed_columns) {\n                if (column.width === 0) continue;\n                const cell_wrapper = createSVG('g', {\n                    class: 'cell-wrapper',\n                    'data-row-id': row.id,\n                    'data-col-id': column.id,\n                    append_to: this.fixed_col_layers.cell,\n                });\n\n                const fixed_cell = createSVG('rect', {\n                    x: pos_x,\n                    y: row_y,\n                    width: column.width,\n                    height: row_height,\n                    append_to: cell_wrapper,\n                });\n                row.cell_wrapper[c].fixed_cell = fixed_cell;\n\n\n                const cell = this.cells.find(t => t.row === row.id && t.column === column.id);\n                if (cell) {\n\n                    const max_width = column.width;\n                    let text_content = cell.value;\n                    const text_width = text_content.length * 7;\n                    let tooltip = '';\n                    if (cell.tooltip)\n                        tooltip = cell.tooltip;\n\n                    if (text_width > max_width) {\n                        const reduction_percentage = (text_width - max_width) / text_width;\n                        const visible_characters = Math.max(0, Math.round(text_content.length * (1 - reduction_percentage))) - 1;\n                        text_content = text_content.substring(0, visible_characters);\n                    }\n                    const text = createSVG('text', {\n                        x: (column.width / 2) + pos_x,\n                        y: 24 + row_y,\n                        innerHTML: text_content,\n                        value: String(cell.value),\n                        tooltip: tooltip,\n                        class: 'lower-text',\n                        append_to: cell_wrapper\n                    });\n                    row.cell_wrapper[c].text = text;\n                }\n                pos_x += column.width;\n                c++;\n\n                $.on(cell_wrapper, 'mouseleave', (e) => {\n                    if (e.relatedTarget != null &&\n                        (e.relatedTarget.classList.contains('pointer') ||\n                            e.relatedTarget.classList.contains('title')))\n                        return;\n                    this.hide_popup();\n                });\n            }\n        }\n    }\n\n    make_grid() {\n        this.make_grid_background();\n        this.make_grid_rows();\n        this.make_grid_header();\n        this.make_grid_ticks();\n        this.make_grid_highlights();\n    }\n\n    make_grid_background() {\n        let grid_width;\n        if (this.view_is(VIEW_MODE.WEEK) || this.view_is(VIEW_MODE.MONTH) || this.view_is(VIEW_MODE.YEAR)) {\n            grid_width = (this.dates.length - 1) * this.options.column_width;\n        } else\n            grid_width = this.dates.length * this.options.column_width;\n        const sum_rows_height = this.rows[this.rows.length - 1].y + this.rows[this.rows.length - 1].height;\n        const grid_height = sum_rows_height;\n\n        createSVG('rect', {\n            x: 0,\n            y: 0,\n            width: grid_width,\n            height: grid_height,\n            class: 'grid-background',\n            append_to: this.layers.grid,\n        });\n\n        $.attr(this.$svg, {\n            height: grid_height,\n            width: '100%',\n        });\n    }\n\n    make_grid_rows() {\n        const rows_layer = createSVG('g', { append_to: this.layers.grid });\n        const lines_layer = createSVG('g', { append_to: this.layers.grid });\n\n        const row_width = this.dates.length * this.options.column_width;\n\n        let i = 0;\n\n        for (let row of this.options.rows) {\n            const row_height = this.rows[i].height;\n            const row_y = this.rows[i].y;\n\n            const rect = createSVG('rect', {\n                x: 0,\n                y: row_y,\n                width: row_width,\n                height: row_height,\n                class: 'grid-row',\n                'data-id': row,\n                append_to: rows_layer,\n            });\n\n            this.rows[i].rect = rect;\n\n            const line = createSVG('line', {\n                x1: 0,\n                y1: row_y + row_height,\n                x2: row_width,\n                y2: row_y + row_height,\n                class: 'row-line',\n                append_to: lines_layer,\n            });\n\n            this.rows[i].line = line;\n\n            i++;\n        }\n    }\n\n    make_grid_header() {\n        const header_width = this.dates.length * this.options.column_width;\n        const header_height = this.options.header_height + 10;\n        createSVG('rect', {\n            x: 0,\n            y: 0,\n            width: header_width,\n            height: header_height,\n            class: 'grid-header',\n            append_to: this.layers.date,\n        });\n    }\n\n    make_grid_ticks() {\n        const sum_rows_height = this.rows[this.rows.length - 1].y + this.rows[this.rows.length - 1].height;\n        let tick_x = 0;\n        let tick_y = 0;\n        let tick_height = sum_rows_height;\n\n        for (let date of this.dates) {\n            let tick_class = 'tick';\n            // thick tick for monday\n            if (this.view_is(VIEW_MODE.DAY) && date.getDate() === 1) {\n                tick_class += ' thick';\n            }\n            // thick tick for first week\n            if (\n                this.view_is(VIEW_MODE.WEEK) &&\n                date.getDate() >= 1 &&\n                date.getDate() < 8\n            ) {\n                tick_class += ' thick';\n            }\n            // thick ticks for quarters\n            if (this.view_is(VIEW_MODE.MONTH) && date.getMonth() % 3 === 0) {\n                tick_class += ' thick';\n            }\n\n            createSVG('path', {\n                d: `M ${tick_x} ${tick_y} v ${tick_height}`,\n                class: tick_class,\n                append_to: this.layers.grid,\n            });\n\n            if (this.view_is(VIEW_MODE.MONTH)) {\n                tick_x +=\n                    (date_utils.get_days_in_month(date) *\n                        this.options.column_width) /\n                    30;\n            } else {\n                tick_x += this.options.column_width;\n            }\n        }\n    }\n\n    make_grid_highlights() {\n        const today = date_utils.today();\n        let x = Math.round(date_utils.diff(today, this.dates[0], 'hour') /\n            this.options.step) * this.options.column_width;\n        let width = this.options.column_width;\n\n        switch (this.options.view_mode) {\n            case VIEW_MODE.HOUR:\n                x = date_utils.diff(today, this.dates[0], 'minute') /\n                    this.options.step * this.options.column_width;\n                if (today.getTimezoneOffset() === -60)\n                    x += this.options.column_width;\n                else\n                    x += (this.options.column_width * 2);\n                width *= 24;\n                break;\n            case VIEW_MODE.HALF_DAY:\n                width *= 2;\n                break;\n            case VIEW_MODE.QUARTER_DAY:\n                width *= 4;\n                break;\n            case VIEW_MODE.WEEK:\n                const day_of_week = today.getDay(); // 0 = Domenica, 1 = Lunedì, ..., 6 = Sabato\n                const start_of_week = new Date(today);\n                start_of_week.setDate(today.getDate() - (day_of_week === 0 ? 6 : day_of_week - 1)); // Sposta indietro al lunedì\n                x = Math.round(date_utils.diff(start_of_week, this.dates[0], 'hour') /\n                    this.options.step) * this.options.column_width;\n                break;\n            case VIEW_MODE.MONTH:\n                const start_of_month = date_utils.start_of(today, 'month');\n                x = date_utils.diff(start_of_month, this.dates[0], 'hour') /\n                    this.options.step * this.options.column_width;\n                width = (date_utils.get_days_in_month(today) *\n                    this.options.column_width) /\n                    30;\n                break;\n            case VIEW_MODE.YEAR:\n                const start_of_year = date_utils.start_of(today, 'year');\n                const starting_year = date_utils.start_of(this.scheduler_start, 'year');\n                x = date_utils.diff(start_of_year, starting_year, 'hour') /\n                    this.options.step * this.options.column_width;\n                break;\n            default:\n                break;\n        }\n\n        const y = this.options.header_height + this.options.padding / 2;\n        const height = this.rows[this.rows.length - 1].y +\n            this.rows[this.rows.length - 1].height - y;\n        createSVG('rect', {\n            x,\n            y,\n            width,\n            height,\n            class: 'today-highlight',\n            append_to: this.layers.grid,\n        });\n    }\n\n    make_dates() {\n        let last_date_info = null;\n\n        this.dates.map((date) => {\n            const d = this.get_date_info(date, last_date_info);\n            last_date_info = d;\n            createSVG('text', {\n                x: d.lower_x,\n                y: d.lower_y,\n                innerHTML: d.lower_text,\n                class: 'lower-text bold',\n                append_to: this.layers.date,\n            });\n\n            if ((d.date.getDay() === 6 || d.date.getDay() === 0) &&\n                (this.options.view_mode === VIEW_MODE.DAY ||\n                    this.options.view_mode === VIEW_MODE.HALF_DAY ||\n                    this.options.view_mode === VIEW_MODE.QUARTER_DAY ||\n                    this.options.view_mode === VIEW_MODE.HOUR)) {\n\n                let highlight_x;\n                const highlight_y = d.lower_y + (this.options.padding / 2);\n                let highlight_width = this.options.column_width;\n                const highlight_height = this.rows[this.rows.length - 1].y +\n                    this.rows[this.rows.length - 1].height -\n                    this.options.header_height -\n                    (this.options.padding / 2);\n\n                if (this.view_is(VIEW_MODE.DAY))\n                    highlight_x = d.lower_x - (this.options.column_width / 2);\n                else if (this.view_is(VIEW_MODE.HOUR))\n                    if (d.date.getTimezoneOffset() === -60)\n                        highlight_x = d.lower_x + this.options.column_width;\n                    else\n                        highlight_x = d.lower_x + (this.options.column_width * 2);\n                else\n                    highlight_x = d.lower_x;\n\n                createSVG('rect', {\n                    x: highlight_x,\n                    y: highlight_y,\n                    width: highlight_width,\n                    height: highlight_height,\n                    class: 'weekend-highlight',\n                    append_to: this.layers.grid,\n                });\n            }\n            if (d.upper_text) {\n                createSVG('text', {\n                    x: d.upper_x,\n                    y: d.upper_y,\n                    innerHTML: d.upper_text,\n                    class: 'upper-text bold',\n                    append_to: this.layers.date,\n                });\n            }\n            return d;\n        });\n    }\n\n    get_date_info(date, last_date_info) {\n        let column_width = this.options.column_width;\n        let x_pos;\n        let hour_pointer;\n        let date_text;\n        const hour = [\n            '00', '01', '02', '03', '04', '05', '06', '07', '08', '09',\n            '10', '11', '12', '13', '14', '15', '16', '17', '18', '19',\n            '20', '21', '22', '23'\n        ];\n        let last_date = null;\n        if (last_date_info) {\n            last_date = last_date_info.date;\n        } else {\n            last_date = date_utils.add(date, 1, 'year');\n            last_date = date_utils.add(last_date, 1, 'month');\n            last_date = date_utils.add(last_date, 1, 'day');\n        }\n        if (this.view_is(VIEW_MODE.DAY)) {\n            date_text = {\n                Day_lower:\n                    date.getDate() !== last_date.getDate()\n                        ? date_utils.format(date, 'D dd', this.options.language)\n                        : '',\n                Day_upper:\n                    date.getMonth() !== last_date.getMonth()\n                        ? date_utils.format(date, 'MMM YYYY', this.options.language)\n                        : '',\n            };\n            x_pos = {\n                Day_lower: column_width / 2,\n                Day_upper: (column_width * 30) / 2\n            };\n        } else if (this.view_is(VIEW_MODE.HOUR)) {\n            hour_pointer = last_date_info?.hour_pointer || 0;\n            date_text = {\n                Hour_lower: hour[hour_pointer],\n                Hour_upper:\n                    hour_pointer === 0\n                        ? date_utils.format(date, 'ddd D MMM YYYY', this.options.language)\n                        : '',\n            };\n            hour_pointer = (hour_pointer < 23) ? hour_pointer + 1 : 0;\n            x_pos = {\n                Hour_lower: 0,\n                Hour_upper: column_width * 24 / 2\n            };\n        } else if (this.view_is(VIEW_MODE.WEEK)) {\n            date_text = {\n                Week_lower:\n                    date.getMonth() !== last_date.getMonth()\n                        ? date_utils.format(date, 'D MMM', this.options.language)\n                        : date_utils.format(date, 'D', this.options.language),\n                Week_upper:\n                    date.getMonth() !== last_date.getMonth()\n                        ? date_utils.format(date, 'MMM YYYY', this.options.language)\n                        : '',\n            };\n            x_pos = {\n                Week_lower: 0,\n                Week_upper: (column_width * 4) / 2\n            };\n        } else if (this.view_is(VIEW_MODE.QUARTER_DAY)) {\n            hour_pointer = last_date_info?.hour_pointer || 0;\n            date_text = {\n                'Quarter Day_lower': hour[hour_pointer],\n                'Quarter Day_upper':\n                    hour_pointer === 0\n                        ? date_utils.format(date, 'ddd D MMM YYYY', this.options.language)\n                        : '',\n            };\n            hour_pointer = (hour_pointer < 18) ? hour_pointer + 6 : 0;\n            x_pos = {\n                'Quarter Day_lower': 0,\n                'Quarter Day_upper': column_width + (column_width / 2)\n            };\n        } else if (this.view_is(VIEW_MODE.HALF_DAY)) {\n            hour_pointer = last_date_info?.hour_pointer || 0;\n            date_text = {\n                'Half Day_lower': hour[hour_pointer],\n                'Half Day_upper':\n                    hour_pointer === 0\n                        ? date.getMonth() !== last_date.getMonth()\n                            ? date_utils.format(date, 'D dd MMM', this.options.language)\n                            : date_utils.format(date, 'D dd MM YYY', this.options.language)\n                        : '',\n            };\n            hour_pointer = (hour_pointer < 12) ? hour_pointer + 12 : 0;\n            x_pos = {\n                'Half Day_lower': 0,\n                'Half Day_upper': column_width\n            };\n        } else if (this.view_is(VIEW_MODE.MONTH)) {\n            date_text = {\n                Month_lower: date_utils.format(date, 'MMM YYYY', this.options.language),\n                Month_upper:\n                    date.getFullYear() !== last_date.getFullYear()\n                        ? date_utils.format(date, 'YYYY', this.options.language)\n                        : '',\n            };\n            column_width =\n                (date_utils.get_days_in_month(date) * column_width) / 30;\n            x_pos = {\n                Month_lower: column_width / 2,\n                Month_upper: (column_width * 12) / 2\n            };\n        } else if (this.view_is(VIEW_MODE.YEAR)) {\n            date_text = {\n                Year_lower: date_utils.format(date, 'YYYY', this.options.language),\n                Year_upper:\n                    date.getFullYear() !== last_date.getFullYear()\n                        ? date_utils.format(date, 'YYYY', this.options.language)\n                        : '',\n            };\n            x_pos = {\n                Year_lower: column_width / 2,\n                Year_upper: (column_width * 30) / 2\n            };\n        };\n\n        const base_pos = {\n            x: last_date_info\n                ? last_date_info.base_pos_x + last_date_info.column_width\n                : 0,\n            lower_y: this.options.header_height,\n            upper_y: this.options.header_height - 25,\n        };\n\n        return {\n            date,\n            column_width,\n            base_pos_x: base_pos.x,\n            upper_text: date_text[`${this.options.view_mode}_upper`],\n            lower_text: date_text[`${this.options.view_mode}_lower`],\n            upper_x: base_pos.x + x_pos[`${this.options.view_mode}_upper`],\n            upper_y: base_pos.upper_y,\n            lower_x: base_pos.x + x_pos[`${this.options.view_mode}_lower`],\n            lower_y: base_pos.lower_y,\n            hour_pointer,\n        };\n    }\n\n    make_bars() {\n        this.bars = this.tasks.map((task) => {\n            const bar = new Bar(this, task);\n            this.layers.bar.appendChild(bar.group);\n            return bar;\n        });\n    }\n\n    make_arrows() {\n        this.arrows = [];\n        for (let task of this.tasks) {\n            let arrows = [];\n            arrows = task.dependencies\n                .map((task_id) => {\n                    const dependency = this.get_task(task_id);\n                    if (!dependency) return;\n                    const arrow = new Arrow(\n                        this,\n                        this.get_bar(dependency.id), // from_task\n                        this.get_bar(task.id) // to_task\n                    );\n                    this.layers.arrow.appendChild(arrow.element);\n                    return arrow;\n                })\n                .filter(Boolean); // filter falsy values\n            this.arrows = this.arrows.concat(arrows);\n        }\n    }\n\n    map_arrows_on_bars() {\n        for (let bar of this.bars) {\n            bar.arrows = this.arrows.filter((arrow) => {\n                return (\n                    arrow.from_task.task.id === bar.task.id ||\n                    arrow.to_task.task.id === bar.task.id\n                );\n            });\n        }\n    }\n\n    set_width() {\n        const actual_width = this.$svg\n            .querySelector('.grid .grid-row')\n            .getAttribute('width');\n        this.$svg.setAttribute('width', actual_width);\n    }\n\n    set_scroll_position() {\n        const parent_element = this.$svg.parentElement;\n        if (!parent_element) return;\n\n        const hours_before_today = date_utils.diff(\n            date_utils.today(),\n            this.scheduler_start,\n            'hour'\n        );\n\n        const scroll_pos =\n            (hours_before_today / this.options.step) *\n            this.options.column_width -\n            this.options.column_width;\n\n        parent_element.scrollLeft = scroll_pos;\n    }\n\n    bind_grid_events() {\n        const scroll = this.$svg.parentElement;\n        let is_dragging = false;\n        let start_x;\n        let scroll_left;\n        let x = 0;\n        let is_resizing = false;\n        let header_tick = null;\n\n        $.on(this.$svg, 'mousedown', '.grid-header, .lower-text, .upper-text', (e) => {\n            is_dragging = true;\n            start_x = e.pageX;\n            scroll_left = scroll.scrollLeft;\n        });\n\n        $.on(this.$container_parent, 'mousemove', '.grid-row, .grid-header, .lower-text, .upper-text, .weekend-highlight', (e) => {\n            if (is_dragging) {\n                const x = e.pageX;\n                const walk = x - start_x;\n                scroll.scrollLeft = scroll_left - walk;\n            }\n        });\n\n        $.on(document, 'mouseup', () => {\n            if (is_dragging)\n                is_dragging = false;\n\n            if (is_resizing) {\n                is_resizing = false;\n                header_tick = null;\n            }\n        });\n\n        $.on(this.$container_parent, 'mouseleave', () => {\n            if (is_dragging)\n                is_dragging = false;\n\n            if (is_resizing) {\n                is_resizing = false;\n                header_tick = null;\n            }\n        });\n\n        $.on(this.$svg, 'click', '.grid-row', (e) => {\n            if (e.target.classList.contains('grid-row')) {\n                const row = $.closest('.grid-row', e.target);\n                const data_id = row.getAttribute('data-id');\n                const cells = this.$column_svg.querySelectorAll('g.cell > g.cell-wrapper[data-row-id=\"' + data_id + '\"]');\n                const is_currently_selected = row.classList.contains('selected-row');\n\n                this.unselect_all();\n                this.hide_popup();\n                if (!is_currently_selected) {\n                    row.classList.add('selected-row');\n                    cells.forEach(cell => {\n                        cell.classList.add('selected-row');\n                    });\n                }\n\n                this.trigger_event('row_select', [data_id]);\n            }\n        });\n\n        $.on(this.$svg, 'dblclick', '.grid-row, .weekend-highlight, .today-highlight', (e) => {\n            let data_id;\n            if (e.target.classList.contains('weekend-highlight') || e.target.classList.contains('today-highlight')) {\n                let prev_y = 0;\n                this.rows.forEach(row => {\n                    if (e.offsetY >= prev_y && e.offsetY < row.y)\n                        return;\n                    data_id = row.id;\n                    prev_y = row.y;\n                })\n            } else\n                data_id = e.target.getAttribute('data-id');\n\n            const x_in_units = e.offsetX / this.options.column_width;\n            let datetime;\n            if (this.view_is('Hour'))\n                datetime = date_utils.add(\n                    this.scheduler_start,\n                    x_in_units * this.options.step,\n                    'minute');\n            else\n                datetime = date_utils.add(\n                    this.scheduler_start,\n                    x_in_units * this.options.step,\n                    'hour');\n\n            this.trigger_event('grid_dblclick', [data_id, date_utils.to_local(datetime)]);\n        });\n\n        $.on(this.$container, 'scroll', e => {\n            this.$column_container.scrollTop = e.currentTarget.scrollTop;\n            this.layers.date.setAttribute('transform', 'translate(0,' + e.currentTarget.scrollTop + ')');\n            this.fixed_col_layers.header.setAttribute('transform', 'translate(0,' + e.currentTarget.scrollTop + ')');\n        });\n\n        $.on(this.$column_container, 'scroll', e => {\n            this.$container.scrollTop = e.currentTarget.scrollTop;\n        });\n\n        $.on(this.$column_svg, 'mousedown', '.header-tick', (e) => {\n            is_resizing = true;\n            x = e.clientX;\n            header_tick = e.target;\n        });\n\n        $.on(this.$container_parent, 'mousemove', '.header-tick, .grid-header', (e) => {\n            if (is_resizing) {\n                const delta_x = e.clientX - x;\n                x = e.clientX;\n                let cell_x;\n                let cell_width;\n                let max_width;\n                let text_pos_x;\n                let need_to_resize = true;\n                let d_attr = header_tick.getAttribute('d');\n                const tick_x = parseInt(d_attr.split(' ')[1]);\n                //cell-wrapper\n                const cells = this.$column_svg.querySelectorAll('g.cell-wrapper > *');\n                for (let i = 0; i < cells.length; i++) {\n                    const cell = cells[i];\n                    if (cell.tagName === 'rect') {\n                        cell_x = parseInt(cell.getAttribute('x'));\n                        cell_width = cell.getBBox().width;\n                        if (cell_x < tick_x && (cell_width + cell_x) > tick_x) {\n                            max_width = cell_width + delta_x;\n                            if (max_width < 50) { //impostata larghezza minima\n                                need_to_resize = false;\n                                break;\n                            }\n                            $.attr(cell, 'width', max_width);\n                            text_pos_x = tick_x + 2 + cell_x;\n                        } else if (cell_x > tick_x) {\n                            $.attr(cell, 'x', cell_x + delta_x);\n                        }\n                    } else {\n                        if (cell_x < tick_x && (cell_width + cell_x) > tick_x) {\n                            let text_content = cell.getAttribute('value');\n                            const text_width = text_content.length * 7;\n                            if (text_width > max_width) {\n                                const reduction_percentage = (text_width - max_width) / text_width;\n                                const visible_characters = Math.max(0, Math.round(text_content.length * (1 - reduction_percentage))) - 1;\n                                cell.textContent = text_content.substring(0, visible_characters);\n                            } else {\n                                const expansion_percentage = (max_width - text_width) / text_content.length;\n                                const visible_characters = Math.min(text_content.length, Math.round(text_content.length * (1 + expansion_percentage)));\n                                cell.textContent = text_content.substring(0, visible_characters);\n                            }\n                            $.attr(cell, 'x', text_pos_x / 2);\n                        } else if (cell_x > tick_x) {\n                            const text_x = parseInt(cell.getAttribute('x'));\n                            $.attr(cell, 'x', text_x + delta_x);\n                        }\n                    }\n                }\n\n                if (need_to_resize) {\n                    //tick\n                    let new_d_attr = d_attr.replace(/M\\s*\\d+/, `M ${tick_x + delta_x}`);\n                    $.attr(header_tick, 'd', new_d_attr);\n\n                    //other tick\n                    const header_ticks = this.$column_svg.querySelectorAll('g.header > path');\n                    header_ticks.forEach(tick => {\n                        if (tick !== header_tick) {\n                            const d_attr = tick.getAttribute('d');\n                            const M_value = parseInt(d_attr.split(' ')[1]);\n                            if (tick_x < M_value) {\n                                let new_d_attr = d_attr.replace(/M\\s*\\d+/, `M ${M_value + delta_x}`);\n                                $.attr(tick, 'd', new_d_attr);\n                            }\n                        }\n                    });\n\n                    //background\n                    const current_width = parseInt(this.$column_svg.getAttribute('width'));\n                    const new_width = current_width + delta_x;\n                    $.attr(this.$column_svg, 'width', new_width);\n\n                    //header\n                    $.attr(this.$column_svg.querySelector('g.header > rect.grid-header'), 'width', new_width);\n                    //header text\n                    const header_text = this.$column_svg.querySelectorAll('g.header > text.lower-text.bold');\n                    const text_to_resize = header_tick.previousSibling;\n                    header_text.forEach(text => {\n                        const text_x = parseFloat(text.getAttribute('x'));\n\n                        if (text === text_to_resize) {\n                            const left_tick = (text_x * 2) - tick_x - 2;\n                            const max_width = tick_x - Math.abs(left_tick) + delta_x;\n                            const text_content = text.textContent;\n                            const original_text = text.getAttribute('value');\n                            const text_width = text_content.length * 7;\n                            if (text_width > max_width) {\n                                const reduction_percentage = (text_width - max_width) / text_width;\n                                const visible_characters = Math.max(0, Math.round(text_content.length * (1 - reduction_percentage))) - 1;\n                                text.textContent = text_content.substring(0, visible_characters);\n                            } else {\n                                const expansion_percentage = (max_width - text_width) / (original_text.length * 7);\n                                const visible_characters = Math.min(original_text.length, Math.round(text_content.length * (1 + expansion_percentage)));\n                                text.textContent = original_text.substring(0, visible_characters);\n                            }\n                            $.attr(text, 'x', text_pos_x / 2);\n                        }\n\n                        if (text_x > tick_x)\n                            $.attr(text, 'x', text_x + delta_x);\n                    });\n                    //ticks under the header\n                    const ticks = this.$column_svg.querySelectorAll('g.grid > path');\n                    ticks.forEach(tick => {\n                        const d_attr = tick.getAttribute('d');\n                        const M_value = parseInt(d_attr.split(' ')[1]);\n                        if (tick_x < M_value) {\n                            let new_d_attr = d_attr.replace(/M\\s*\\d+/, `M ${M_value + delta_x}`);\n                            $.attr(tick, 'd', new_d_attr);\n                        }\n                    });\n\n                    //row\n                    const fixed_grid_rows = this.$column_svg.querySelectorAll('g.grid > g > rect.grid-row');\n                    fixed_grid_rows.forEach(row => {\n                        $.attr(row, 'width', new_width);\n                    });\n                }\n            }\n        });\n\n        $.on(this.$container, 'wheel', '.grid, .bar', (e) => {\n            this.hide_popup();\n            e.preventDefault();\n\n            const VIEW_MODES_ORDER = [\n                VIEW_MODE.HOUR,\n                VIEW_MODE.QUARTER_DAY,\n                VIEW_MODE.HALF_DAY,\n                VIEW_MODE.DAY,\n                VIEW_MODE.WEEK,\n                VIEW_MODE.MONTH,\n                VIEW_MODE.YEAR,\n            ];\n\n            let curr_index = VIEW_MODES_ORDER.indexOf(this.options.view_mode);\n            const scroll_pos = this.$svg.parentElement.scrollLeft;\n            const scroll_width = this.$svg.parentElement.scrollWidth;\n\n            if (e.deltaY > 0 && curr_index !== VIEW_MODES_ORDER.length - 1) {\n                this.change_view_mode(VIEW_MODES_ORDER[curr_index + 1]);\n            } else if (e.deltaY < 0 && curr_index > 0) {\n                this.change_view_mode(VIEW_MODES_ORDER[curr_index - 1]);\n            }\n\n            this.$svg.parentElement.scrollLeft = scroll_pos * (this.$svg.parentElement.scrollWidth / scroll_width);\n        });\n    }\n\n    bind_cell_events() {\n        $.on(this.$column_svg, 'mouseover', '.cell-wrapper > text', (e) => {\n            const cell = $.closest('.cell-wrapper > text', e.target);\n            const cell_tooltip = cell.getAttribute('tooltip');\n            const cell_value = cell.getAttribute('value');\n            if (cell_value !== cell.innerHTML || (\n                cell_tooltip && cell_tooltip !== cell_value))\n                this.show_cell_popup(cell, cell_value, cell_tooltip, e);\n        });\n\n        $.on(this.$column_svg, 'dblclick', '.cell-wrapper', (e) => {\n            const cell_wrapper = $.closest('.cell-wrapper', e.target);\n            const data_row_id = cell_wrapper.getAttribute('data-row-id');\n            const data_col_id = cell_wrapper.getAttribute('data-col-id');\n            this.trigger_event('cell_dblclick', [data_row_id, data_col_id]);\n        });\n\n        $.on(this.$column_svg, 'click', '.cell-wrapper', (e) => {\n            const cell_wrapper = $.closest('.cell-wrapper', e.target);\n            const data_row_id = cell_wrapper.getAttribute('data-row-id');\n            const cells = this.$column_svg.querySelectorAll('g.cell > g.cell-wrapper[data-row-id=\"' + data_row_id + '\"]');\n            const row = this.$container.querySelector('g.grid > g > rect[data-id=\"' + data_row_id + '\"]');\n            const is_currently_selected = row.classList.contains('selected-row');\n\n            this.unselect_all();\n            this.hide_popup();\n\n            if (!is_currently_selected) {\n                row.classList.add('selected-row');\n                cells.forEach(cell => {\n                    cell.classList.add('selected-row');\n                });\n            }\n\n            this.trigger_event('row_select', [data_row_id]);\n        });\n    }\n\n    bind_bar_events() {\n        let is_dragging = false;\n        let x_on_start = 0;\n        let y_on_start = 0;\n        let is_resizing_left = false;\n        let is_resizing_right = false;\n        let parent_bar_id = null;\n        let bars = []; // instanceof Bars, the dragged bar and its children\n        let max_y = 0;\n        const min_y = this.options.header_height + (this.options.padding / 2);\n        this.bar_being_dragged = null; // instanceof dragged bar\n\n        function action_in_progress() {\n            return is_dragging || is_resizing_left || is_resizing_right;\n        }\n\n        $.on(this.$svg, 'mousedown', '.bar-wrapper, .handle', (e, element) => {\n            const bar_wrapper = $.closest('.bar-wrapper', element);\n\n            if (element.classList.contains('left')) {\n                is_resizing_left = true;\n            } else if (element.classList.contains('right')) {\n                is_resizing_right = true;\n            } else if (element.classList.contains('bar-wrapper')) {\n                is_dragging = true;\n            }\n\n            bar_wrapper.classList.add('active');\n\n            x_on_start = e.offsetX;\n            y_on_start = e.offsetY;\n\n            parent_bar_id = bar_wrapper.getAttribute('data-id');\n            const ids = [\n                parent_bar_id,\n                ...this.get_all_dependent_tasks(parent_bar_id),\n            ];\n            bars = ids.map((id) => {\n                const bar = this.get_bar(id);\n                if (parent_bar_id === id) {\n                    this.bar_being_dragged = bar;\n                }\n                const $bar = bar.$bar;\n                $bar.ox = $bar.getX();\n                $bar.oy = $bar.getY();\n                $bar.owidth = $bar.getWidth();\n                $bar.finaldx = 0;\n                $bar.finaldy = 0;\n                return bar;\n            });\n\n            is_resizing_left = is_resizing_left && this.bar_being_dragged.task.resize_left;\n            is_resizing_right = is_resizing_right && this.bar_being_dragged.task.resize_right;\n            is_dragging = is_dragging && (this.bar_being_dragged.task.drag_drop_x || this.bar_being_dragged.task.drag_drop_y);\n            max_y = this.rows[this.rows.length - 1].y + this.rows[this.rows.length - 1].height - this.options.bar_height - (this.options.padding / 2);\n        });\n\n        $.on(this.$svg, 'mousemove', (e) => {\n            if (!action_in_progress()) return;\n            const dx = e.offsetX - x_on_start;\n            let dy = e.offsetY - y_on_start;\n\n            this.hide_popup();\n\n            // update the dragged bar\n            const bar_being_dragged = this.bar_being_dragged;\n            if (is_resizing_left) {\n                bar_being_dragged.$bar.finaldx = this.get_snap_x_position(dx);\n                bar_being_dragged.update_bar_position({\n                    x:\n                        bar_being_dragged.$bar.ox +\n                        bar_being_dragged.$bar.finaldx,\n                    width:\n                        bar_being_dragged.$bar.owidth -\n                        bar_being_dragged.$bar.finaldx,\n                });\n            } else if (is_resizing_right) {\n                bar_being_dragged.$bar.finaldx = this.get_snap_x_position(dx);\n                bar_being_dragged.update_bar_position({\n                    width:\n                        bar_being_dragged.$bar.owidth +\n                        bar_being_dragged.$bar.finaldx,\n                });\n            } else if (is_dragging) {\n                if (bar_being_dragged.task.drag_drop_x) {\n\n                    if (this.options.moving_scroll_bar) {\n                        this.moving_scroll_bar(e);\n                    }\n\n                    bar_being_dragged.$bar.finaldx = this.get_snap_x_position(dx);\n                    bar_being_dragged.update_bar_position({\n                        x:\n                            bar_being_dragged.$bar.ox +\n                            bar_being_dragged.$bar.finaldx\n                    });\n                }\n                if (bar_being_dragged.task.drag_drop_y) {\n                    const y = bar_being_dragged.$bar.oy + dy;\n                    if (y < min_y) {\n                        dy = min_y - bar_being_dragged.$bar.oy;\n                    } else if (y > max_y) {\n                        dy = max_y - bar_being_dragged.$bar.oy;\n                    }\n                    bar_being_dragged.$bar.finaldy = this.get_snap_y_position(dy);\n                    bar_being_dragged.update_bar_position({\n                        y:\n                            bar_being_dragged.$bar.oy +\n                            bar_being_dragged.$bar.finaldy\n                    });\n                }\n            }\n\n            // update children\n            bars.forEach((bar) => {\n                if (bar.task.id === parent_bar_id) {\n                    return;\n                }\n                const $bar = bar.$bar;\n                $bar.finaldx = this.get_snap_x_position(dx);\n                this.hide_popup();\n                if (is_resizing_left) {\n                    bar.update_bar_position({\n                        x: $bar.ox + $bar.finaldx,\n                    });\n                } else if (is_dragging) {\n                    bar.update_bar_position({\n                        x: $bar.ox + $bar.finaldx,\n                    });\n                }\n            });\n        });\n\n        $.on(this.$svg, 'mouseup', (e) => {\n            if (action_in_progress()) {\n                bars.forEach((bar) => {\n                    bar.group.classList.remove('active');\n\n                    const $bar = bar.$bar;\n                    const start_row_index = bar.task._index;\n\n                    if ($bar.finaldx || $bar.finaldy) {\n                        bar.position_changed((is_dragging || is_resizing_left), (is_dragging || is_resizing_right));\n                        bar.set_action_completed();\n                        if (this.options.overlap)\n                            this.overlap(start_row_index, bar.task._index);\n                        else\n                            this.red_border();\n                    }\n                });\n            }\n\n            this.bar_being_dragged = null;\n            is_dragging = false;\n            is_resizing_left = false;\n            is_resizing_right = false;\n        });\n\n        this.bind_bar_progress();\n    }\n\n    bind_bar_progress() {\n        let x_on_start = 0;\n        let y_on_start = 0;\n        let is_resizing = null;\n        let bar = null;\n        let $bar_progress = null;\n        let $bar = null;\n\n        $.on(this.$svg, 'mousedown', '.handle.progress', (e, handle) => {\n            is_resizing = true;\n            x_on_start = e.offsetX;\n            y_on_start = e.offsetY;\n\n            const $bar_wrapper = $.closest('.bar-wrapper', handle);\n            const id = $bar_wrapper.getAttribute('data-id');\n            bar = this.get_bar(id);\n\n            $bar_progress = bar.$bar_progress;\n            $bar = bar.$bar;\n\n            $bar_progress.finaldx = 0;\n            $bar_progress.owidth = $bar_progress.getWidth();\n            $bar_progress.min_dx = -$bar_progress.getWidth();\n            $bar_progress.max_dx = $bar.getWidth() - $bar_progress.getWidth();\n        });\n\n        $.on(this.$svg, 'mousemove', (e) => {\n            if (!is_resizing) return;\n            let dx = e.offsetX - x_on_start;\n            let dy = e.offsetY - y_on_start;\n\n            if (dx > $bar_progress.max_dx) {\n                dx = $bar_progress.max_dx;\n            }\n            if (dx < $bar_progress.min_dx) {\n                dx = $bar_progress.min_dx;\n            }\n\n            const $handle = bar.$handle_progress;\n            $.attr($bar_progress, 'width', $bar_progress.owidth + dx);\n            $.attr($handle, 'points', bar.get_progress_polygon_points());\n            $bar_progress.finaldx = dx;\n        });\n        $.on(this.$svg, 'mouseup', () => {\n            if (is_resizing) {\n                if (!($bar_progress && $bar_progress.finaldx)) return;\n                bar.progress_changed();\n                bar.set_action_completed();\n            }\n            is_resizing = false;\n        });\n    }\n\n    compute_row_sub_level(row_id) {\n        const task_in_same_row = this.tasks.filter(task => task.row === row_id);\n        //ordina per data le task in quella riga\n        task_in_same_row.sort((a, b) => a._start - b._start);\n\n        let sub_levels = [];\n\n        task_in_same_row.forEach(task => {\n            let i = 0;\n            // Trova l'indice del sotto livello in cui inserire questa task\n            for (i = 0; i < sub_levels.length; i++) {\n                const last_task_in_sub_level = sub_levels[i][sub_levels[i].length - 1];\n                if (task._start >= last_task_in_sub_level._end)\n                    break;\n            }\n\n            task._sub_level_index = i;\n            if (!sub_levels[task._sub_level_index])\n                sub_levels[task._sub_level_index] = [];\n\n            sub_levels[task._sub_level_index].push(task);\n        });\n\n        return sub_levels;\n    }\n\n    compute_row_height(nlevels) {\n        nlevels = nlevels > 0 ? nlevels : 1;\n        const row_height = (this.options.bar_height + this.options.padding) * nlevels;\n        return row_height;\n    }\n\n    compute_row_y(row_index, fixed_column_width) {\n        let sum_y = this.rows[row_index].y;\n        for (let i = row_index; i < this.rows.length; i++) {\n            $.attr(this.rows[i].rect, 'y', sum_y);\n            if (fixed_column_width !== 0) {\n                $.attr(this.rows[i].fixed_rect, 'y', sum_y);\n                //cell\n                for (let c = 0; c < this.options.fixed_columns.length; c++) {\n                    $.attr(this.rows[i].cell_wrapper[c].fixed_cell, 'y', sum_y);\n                    if (this.rows[i].cell_wrapper[c].text)\n                        $.attr(this.rows[i].cell_wrapper[c].text, 'y', sum_y + 24);\n                }\n            }\n\n            this.rows[i].y = sum_y;\n            sum_y += this.rows[i].height;\n            //line\n            if (fixed_column_width !== 0) {\n                $.attr(this.rows[i].fixed_line, 'y1', sum_y);\n                $.attr(this.rows[i].fixed_line, 'y2', sum_y);\n            }\n            $.attr(this.rows[i].line, 'y1', sum_y);\n            $.attr(this.rows[i].line, 'y2', sum_y);\n        }\n    }\n\n    overlap(start_row_index, end_row_index) {\n        let render = false;\n        let update_from_this_row_index = end_row_index;\n        const fixed_column_width = parseInt(this.$column_svg.getAttribute('width'));\n\n        const end_row = this.rows[end_row_index];\n        const new_end_sub_level = this.compute_row_sub_level(end_row.id);\n        if (new_end_sub_level.length !== end_row.sub_level.length) {\n            end_row.sub_level = new_end_sub_level;\n            end_row.height = this.compute_row_height(end_row.sub_level.length);\n\n            $.attr(end_row.rect, 'height', end_row.height);\n            if (fixed_column_width !== 0) {\n                $.attr(end_row.fixed_rect, 'height', end_row.height);\n                for (let i = 0; i < this.options.fixed_columns.length; i++) {\n                    $.attr(end_row.cell_wrapper[i].fixed_cell, 'height', end_row.height);\n                }\n            }\n            render = true;\n        } else {\n            const bars_in_same_row = this.bars.filter(bar =>\n                bar.task._index === end_row_index\n            );\n            bars_in_same_row.forEach(bar => {\n                const new_y = bar.compute_y();\n                bar.update_bar_position({ y: new_y });\n            });\n        }\n\n        if (start_row_index != end_row_index) {\n            const start_row = this.rows[start_row_index];\n            const new_start_sub_level = this.compute_row_sub_level(start_row.id);\n            if (new_start_sub_level.length != start_row.sub_level.length) {\n                start_row.sub_level = new_start_sub_level;\n                start_row.height = this.compute_row_height(start_row.sub_level.length);\n\n                $.attr(start_row.rect, 'height', start_row.height);\n                if (fixed_column_width !== 0) {\n                    $.attr(start_row.fixed_rect, 'height', start_row.height);\n                    for (let i = 0; i < this.options.fixed_columns.length; i++) {\n                        $.attr(start_row.cell_wrapper[i].fixed_cell, 'height', start_row.height);\n                    }\n                }\n                render = true;\n                if (start_row_index < end_row_index)\n                    update_from_this_row_index = start_row_index;\n            }\n        }\n\n        if (render) {\n            const scrollTop = this.$container.scrollTop;\n            this.compute_row_y(update_from_this_row_index, fixed_column_width);\n            this.update_from_row(update_from_this_row_index, fixed_column_width);\n            if (scrollTop > (this.$svg.getAttribute('height') - this.$container.clientHeight))\n                this.$container.scrollTop = scrollTop - (this.options.bar_height * 2);\n        }\n    }\n\n    update_from_row(row_index, fixed_column_width) {\n\n        const max_height = this.rows[this.rows.length - 1].y + this.rows[this.rows.length - 1].height;\n\n        //background\n        this.$svg.setAttribute('height', max_height);\n        const grid_background = this.$svg.querySelector('g.grid > rect');\n        $.attr(grid_background, 'height', max_height);\n\n        if (fixed_column_width !== 0) {\n            //fixed background\n            this.$column_svg.setAttribute('height', max_height);\n            const fixed_background = this.$column_svg.querySelector('g.grid > rect');\n            $.attr(fixed_background, 'height', max_height);\n\n            //fixed ticks\n            const fixed_ticks = Array.from(this.$column_svg.querySelectorAll('g.grid > path'));\n            fixed_ticks.forEach(tick => {\n                const curr_d = tick.getAttribute('d');\n                const new_d = curr_d.replace(/v\\s*[^v]*$/, `v ${max_height}`);\n\n                $.attr(tick, 'd', new_d);\n            });\n        }\n        //ticks\n        const ticks = Array.from(this.$svg.querySelectorAll('g.grid > path'));\n        ticks.forEach(tick => {\n            const curr_d = tick.getAttribute('d');\n            const new_d = curr_d.replace(/v\\s*[^v]*$/, `v ${max_height}`);\n\n            $.attr(tick, 'd', new_d);\n        });\n        //highlight\n        if (this.view_is(VIEW_MODE.DAY)) {\n            const today_highlight = this.$svg.getElementsByClassName('today-highlight');\n            $.attr(today_highlight[0], 'height', max_height);\n            const weekend_highlight = Array.from(this.$svg.getElementsByClassName('weekend-highlight'))\n            weekend_highlight.forEach(weekend => {\n                $.attr(weekend, 'height', max_height);\n            });\n        }\n        //bars\n        const bars_to_move = this.bars.filter(bar =>\n            bar.task._index >= row_index\n        );\n        bars_to_move.forEach(bar => {\n            const new_y = bar.compute_y();\n            bar.update_bar_position({ y: new_y });\n        });\n    }\n\n    moving_scroll_bar(e) {\n        //Variabile che serve per aggiornare la scrollbar\n        var scroll_bar = this.$svg.parentElement;\n        //coordinate x e y del mouse\n        var viewportX = e.clientX;\n        var viewportY = e.clientY;\n        //edges del container\n        var edgeTop = this.$container.offsetTop + this.options.header_height + (this.options.padding * 3);\n        var edgeLeft = this.$container.offsetLeft + (this.options.padding * 8);\n        var edgeBottom = this.$container.clientHeight - (this.options.padding * 2);\n        var edgeRight = this.$container.clientWidth - (this.options.padding * 2);\n        //variabili per capire in quale punto ci si trova\n        var isInLeftEdge = (viewportX < edgeLeft);\n        var isInRightEdge = (viewportX > edgeRight);\n        var isInTopEdge = (viewportY < edgeTop);\n        var isInBottomEdge = (viewportY > edgeBottom);\n        //I massimi sono larghezza e atezza del container\n        var maxScrollX = this.$container.scrollWidth;\n        var maxScrollY = this.$svg.getAttribute('height') - this.$container.clientHeight;\n        // Get the current scroll position of the document.(container)\n        var currentScrollX = this.$container.scrollLeft;\n        var currentScrollY = this.$container.scrollTop;\n        // Determine if the window can be scrolled in any particular direction.\n        var canScrollUp = (currentScrollY > 0);\n        var canScrollDown = (currentScrollY < maxScrollY);\n        var canScrollLeft = (currentScrollX > 0);\n        var canScrollRight = (currentScrollX < maxScrollX);\n\n        var nextScrollX = currentScrollX;\n        var nextScrollY = currentScrollY;\n\n        //Serve a calcolare la velocità con cui scrollare\n        var maxStep = 30;\n\n        // Should we scroll left?\n        if (isInLeftEdge && canScrollLeft) {\n            var intensity = ((edgeLeft - viewportX) / edgeLeft);\n            nextScrollX = (nextScrollX - (maxStep * intensity));\n            // Should we scroll right?\n        } else if (isInRightEdge && canScrollRight) {\n            var intensity = ((viewportX - edgeRight) / edgeLeft);\n            nextScrollX = (nextScrollX + (maxStep * intensity));\n        }\n\n        // Should we scroll up?\n        if (isInTopEdge && canScrollUp) {\n            var intensity = ((edgeTop - viewportY) / edgeTop);\n            nextScrollY = (nextScrollY - (maxStep * intensity));\n            // Should we scroll down?\n        } else if (isInBottomEdge && canScrollDown) {\n            var intensity = ((viewportY - edgeBottom) / edgeTop);\n            nextScrollY = (nextScrollY + (maxStep * intensity));\n        }\n\n        nextScrollX = Math.max(0, Math.min(maxScrollX, nextScrollX));\n        nextScrollY = Math.max(0, Math.min(maxScrollY, nextScrollY));\n\n        if (\n            (nextScrollX !== currentScrollX) ||\n            (nextScrollY !== currentScrollY)\n        ) {\n            scroll_bar.scrollLeft = nextScrollX;\n            scroll_bar.scrollTop = nextScrollY;\n        }\n    }\n\n    red_border() {\n        this.bars.forEach(bar => {\n            const bar_wrapper = $.closest('.bar-wrapper', bar.$bar);\n\n            if (this.bars.some(other_bar => {\n                return other_bar.task.id !== bar.task.id &&\n                    other_bar.task.row === bar.task.row &&\n                    bar.task._start < other_bar.task._end &&\n                    bar.task._end > other_bar.task._start;\n            })) {\n                bar_wrapper.classList.add('overlap');\n            }\n            else {\n                bar_wrapper.classList.remove('overlap');\n            }\n        });\n    }\n\n    get_all_dependent_tasks(task_id) {\n        let out = [];\n        let to_process = [task_id];\n        while (to_process.length) {\n            const deps = to_process.reduce((acc, curr) => {\n                acc = acc.concat(this.dependency_map[curr]);\n                return acc;\n            }, []);\n\n            out = out.concat(deps);\n            to_process = deps.filter((d) => !to_process.includes(d));\n        }\n\n        return out.filter(Boolean);\n    }\n\n    show_cell_popup(cell, cell_value, cell_tooltip, e) {\n        if (this.bar_being_dragged) return;\n        if (cell_value === cell_tooltip)\n            cell_tooltip = '';\n        this.show_popup({\n            target_element: cell,\n            title: cell_value,\n            description: '',\n            subtitle: cell_tooltip,\n            task: '',\n            e: e,\n        });\n    }\n\n    get_snap_x_position(dx) {\n        let odx = dx,\n            rem,\n            position,\n            divider;\n\n        switch (this.options.view_mode) {\n            case VIEW_MODE.MONTH:\n                divider = 30;\n                break;\n            case VIEW_MODE.WEEK:\n                divider = 7;\n                break;\n            case VIEW_MODE.DAY:\n                divider = 24;\n                break;\n            case VIEW_MODE.HALF_DAY:\n                divider = 12;\n                break;\n            case VIEW_MODE.QUARTER_DAY:\n                divider = 6;\n                break;\n            case VIEW_MODE.HOUR:\n                divider = 60;\n                break;\n            default:\n                divider = 1\n                break;\n        }\n        rem = dx % (this.options.column_width / divider);\n        position =\n            odx -\n            rem +\n            (rem < this.options.column_width / (2 * divider)\n                ? 0\n                : this.options.column_width / divider);\n        return position;\n    }\n\n    get_snap_y_position(dy) {\n        let ody = dy,\n            rem,\n            position;\n        const row_height = this.options.bar_height + this.options.padding;\n        rem = Math.abs(ody) % row_height;\n        position = ody - rem + (rem < row_height / 2 ? 0 : row_height);\n        if (ody < 0) {\n            position = Math.abs(ody) - rem + (rem < row_height / 2 ? 0 : row_height);\n            position = -position;\n        }\n        return position;\n    }\n\n    unselect_all() {\n        [...this.$column_svg.querySelectorAll('.cell-wrapper.selected-row')].forEach((el) => {\n            el.classList.remove('selected-row');\n        });\n        [...this.$svg.querySelectorAll('.grid-row.selected-row')].forEach((el) => {\n            el.classList.remove('selected-row');\n        });\n        [...this.$svg.querySelectorAll('.bar-wrapper')].forEach((el) => {\n            el.classList.remove('active');\n        });\n    }\n\n    view_is(modes) {\n        if (typeof modes === 'string') {\n            return this.options.view_mode === modes;\n        }\n\n        if (Array.isArray(modes)) {\n            return modes.some((mode) => this.options.view_mode === mode);\n        }\n\n        return false;\n    }\n\n    get_task(id) {\n        return this.tasks.find((task) => {\n            return task.id === id;\n        });\n    }\n\n    get_bar(id) {\n        return this.bars.find((bar) => {\n            return bar.task.id === id;\n        });\n    }\n\n    show_popup(options) {\n        if (!this.popup) {\n            this.popup = new Popup(\n                this.popup_wrapper,\n                this.options.custom_popup_html\n            );\n        }\n        const scroll = this.$container.scrollTop;\n        this.popup.show(options, this.$container_parent, scroll);\n    }\n\n    hide_popup() {\n        this.popup && this.popup.hide();\n    }\n\n    trigger_event(event, args) {\n        if (this.options['on_' + event]) {\n            this.options['on_' + event].apply(null, args);\n        }\n    }\n\n    /**\n     * Gets the oldest starting date from the list of tasks\n     *\n     * @returns Date\n     * @memberof Scheduler\n     */\n    get_oldest_starting_date() {\n        return this.tasks\n            .map((task) => task._start)\n            .reduce((prev_date, cur_date) =>\n                cur_date <= prev_date ? cur_date : prev_date\n            );\n    }\n\n    /**\n     * Clear all elements from the parent svg element\n     *\n     * @memberof Scheduler\n     */\n    clear() {\n        this.$svg.innerHTML = '';\n        this.$column_svg.innerHTML = '';\n    }\n}\n\nScheduler.VIEW_MODE = VIEW_MODE;\n\nfunction generate_id(task) {\n    return task.name + '_' + Math.random().toString(36).slice(2, 12);\n}\n"],"names":["YEAR","MONTH","DAY","HOUR","MINUTE","SECOND","MILLISECOND","date_utils","parse","date","date_separator","time_separator","Date","date_parts","time_parts","parts","split","map","val","parseInt","vals","length","parseFloat","concat","to_string","with_time","TypeError","this","get_date_values","i","padStart","date_string","time_string","format","format_string","lang","Intl","DateTimeFormat","year","month","day","hour","minute","second","fractionalSecondDigits","weekday","timeZone","formatToParts","dateParts","forEach","type","value","day_name_capitalized","charAt","toUpperCase","slice","month_name_capitalized","format_map","YYYY","YYY","substring","MM","DD","HH","mm","ss","SSS","fractionalSecond","D","MMM","ddd","dd","str","formatted_values","Object","keys","sort","a","b","key","includes","replace","push","diff","date_a","date_b","scale","milliseconds","seconds","hours","minutes","days","months","years","endsWith","Math","round","today","now","add","qty","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","UTC","start_of","d","clone","getUTCDay","setUTCDate","scores","should_reset","_scale","getFullYear","get_days_in_month","no_of_days","getMonth","normalize_UTC","getDate","getHours","getMinutes","getSeconds","getMilliseconds","to_local","targetLength","padString","String","repeat","$","expr","con","document","querySelector","createSVG","tag","attrs","elem","createElementNS","attr","append_to","appendChild","innerHTML","setAttribute","animateSVG","svgElement","from","to","animatedSvgElement","dur","begin","animEl","attributeName","animateElement","calcMode","values","keyTimes","keySplines","cubic_bezier","getAnimationElement","event","createEvent","initEvent","eventName","dispatchEvent","name","ease","linear","on","element","selector","callback","delegate","bind","off","handler","removeEventListener","addEventListener","e","delegatedTarget","target","closest","call","matches","parentNode","getAttribute","Bar","constructor","scheduler","task","set_defaults","prepare","draw","action_completed","prepare_values","prepare_helpers","task_end","_end","invalid","height","options","bar_height","handle_width","x","compute_x","y","compute_y","corner_radius","bar_corner_radius","duration_in_minutes","_start","view_is","duration","step","width","column_width","progress_width","progress","group","class","custom_class","id","bar_group","handle_group","SVGElement","prototype","getX","getY","getWidth","getHeight","getEndX","draw_bar","draw_progress_bar","draw_label","draw_resize_handles","$bar","rx","ry","classList","$bar_progress","requestAnimationFrame","update_label_position","bar","resize_right","resize_left","$handle_progress","points","get_progress_polygon_points","join","bar_progress","setup_click_event","bar_being_dragged","show_popup","relatedTarget","contains","hide_popup","unselect_all","trigger_event","subtitle","language","target_element","title","description","update_bar_position","dependencies","dep","get_bar","reduce","prev","curr","update_attr","update_progressbar_position","update_handle_position","update_arrow_position","position_changed","calc_start","calc_end","changed","new_start_date","new_end_date","compute_start_end_date","start","end","new_index","compute_index","new_row","rows","_index","row","progress_changed","new_progress","compute_progress","set_action_completed","setTimeout","x_in_units","scheduler_start","width_in_units","barY","sum_height","header_height","padding","row_start","task_start","floor","bar_y","overlap","_sub_level_index","get_snap_position","dx","rem","position","odx","isNaN","label","max_width","text","textContent","text_width","getBBox","original_text","reduction_percentage","visible_characters","max","expansion_percentage","min","handle","arrows","arrow","update","Arrow","from_task","to_task","calculate_path","start_x","condition","start_y","end_x","end_y","from_is_below_to","curve","arrow_curve","clockwise","curve_y","offset","path","down_1","down_2","left","Popup","parent","custom_html","is_showing","make","hide","pointer","show","container","scroll","Error","compute_width","html","remove","style","HTMLElement","getBoundingClientRect","middle_popup","clientY","clientHeight","offsetHeight","offsetTop","clientX","localName","top","transform","offsetLeft","opacity","title_length","VIEW_MODE","QUARTER_DAY","HALF_DAY","WEEK","Scheduler","wrapper","tasks","cells","setup_options","setup_wrapper","setup_cells","setup_tasks","setup_rows","change_view_mode","bind_events","svg_element","wrapper_element","$svg","$column_svg","$container","createElement","$column_container","$container_parent","container_height","parentElement","popup_wrapper","default_options","date_start","date_end","view_modes","view_mode","date_format","custom_popup_html","drag_drop_x","drag_drop_y","fixed_columns","moving_scroll_bar","hide_fixed_columns","assign","filter","t","column","setup_task","setup_dependencies","need_to_be_lock","indexOf","every","deps","trim","random","toString","generate_id","dependency_map","refresh","scroll_pos","scrollLeft","scroll_width","scrollWidth","sum_y","row_id","sub_level","cell_wrapper","compute_row_sub_level","compute_row_height","mode","update_view_scale","setup_dates","render","setup_scheduler_dates","setup_date_values","scheduler_end","setUTCHours","dates","cur_date","bind_grid_events","bind_cell_events","bind_bar_events","clear","setup_layers","make_fixed_columns","make_grid","make_dates","make_bars","make_arrows","map_arrows_on_bars","set_width","set_scroll_position","red_border","layers","fixed_col_layers","layer","column_grid_width","acc","sum_rows_height","grid_height","grid","rows_layer","lines_layer","row_height","row_y","rect","fixed_rect","fixed_line","x1","y1","x2","y2","header","pos_y","pos_x","text_content","make_cells","c","cell","fixed_cell","find","tooltip","make_grid_background","make_grid_rows","make_grid_header","make_grid_ticks","make_grid_highlights","grid_width","row_width","line","tick_x","tick_height","tick_class","getTimezoneOffset","day_of_week","getDay","start_of_week","setDate","start_of_month","start_of_year","starting_year","last_date_info","get_date_info","lower_x","lower_y","lower_text","highlight_x","highlight_y","highlight_width","highlight_height","upper_text","upper_x","upper_y","x_pos","hour_pointer","date_text","last_date","Day_lower","Day_upper","Hour_lower","Hour_upper","Week_lower","Week_upper","Month_lower","Month_upper","Year_lower","Year_upper","base_pos","base_pos_x","bars","task_id","dependency","get_task","Boolean","actual_width","parent_element","scroll_left","is_dragging","is_resizing","header_tick","pageX","walk","data_id","querySelectorAll","is_currently_selected","prev_y","offsetY","offsetX","datetime","scrollTop","currentTarget","delta_x","cell_x","cell_width","text_pos_x","need_to_resize","d_attr","tagName","text_x","new_d_attr","tick","M_value","new_width","header_text","text_to_resize","previousSibling","left_tick","abs","preventDefault","VIEW_MODES_ORDER","curr_index","deltaY","cell_tooltip","cell_value","show_cell_popup","data_row_id","data_col_id","x_on_start","y_on_start","is_resizing_left","is_resizing_right","parent_bar_id","max_y","min_y","action_in_progress","bar_wrapper","ids","get_all_dependent_tasks","ox","oy","owidth","finaldx","finaldy","dy","get_snap_x_position","get_snap_y_position","start_row_index","bind_bar_progress","min_dx","max_dx","$handle","task_in_same_row","sub_levels","last_task_in_sub_level","nlevels","compute_row_y","row_index","fixed_column_width","end_row_index","update_from_this_row_index","end_row","new_end_sub_level","new_y","start_row","new_start_sub_level","update_from_row","max_height","grid_background","fixed_background","Array","new_d","today_highlight","getElementsByClassName","weekend","scroll_bar","viewportX","viewportY","edgeTop","edgeLeft","edgeBottom","edgeRight","clientWidth","isInLeftEdge","isInRightEdge","isInTopEdge","isInBottomEdge","maxScrollX","maxScrollY","currentScrollX","currentScrollY","nextScrollX","nextScrollY","some","other_bar","out","to_process","divider","ody","el","modes","isArray","popup","args","apply","get_oldest_starting_date","prev_date"],"mappings":"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"}